/**
 * Copyright (C) 2009-2014 Typesafe Inc. <http://www.typesafe.com>
 */

package akka.http.model

import language.implicitConversions
import StatusCodes.ClientError

/**
 * Two-level model of error information.
 * The summary should explain what is wrong with the request or response *without* directly
 * repeating anything present in the message itself (in order to not open holes for XSS attacks),
 * while the detail can contain additional information from any source (even the request itself).
 */
final case class ErrorInfo(summary: String = "", detail: String = "") {
  def withSummary(newSummary: String) = copy(summary = newSummary)
  def withSummaryPrepended(prefix: String) = withSummary(if (summary.isEmpty) prefix else prefix + ": " + summary)
  def withFallbackSummary(fallbackSummary: String) = if (summary.isEmpty) withSummary(fallbackSummary) else this
  def formatPretty = if (summary.isEmpty) detail else if (detail.isEmpty) summary else summary + ": " + detail
  def format(withDetail: Boolean): String = if (withDetail) formatPretty else summary
}

object ErrorInfo {
  /**
   * Allows constructing an `ErrorInfo` from a single string.
   * Used for example when catching exceptions generated by the header value parser, which doesn't provide
   * summary/details information but structures its exception messages accordingly.
   */
  def fromCompoundString(message: String): ErrorInfo = message.split(": ", 2) match {
    case Array(summary, detail) ⇒ apply(summary, detail)
    case _                      ⇒ ErrorInfo("", message)
  }

  implicit def fromSummary(summary: String) = ErrorInfo(summary)
  implicit def fromSummaryAndDetail(pair: (String, String)) = ErrorInfo(pair._1, pair._2)
}

/** Marker for exceptions that provide an ErrorInfo */
abstract class ExceptionWithErrorInfo(info: ErrorInfo) extends RuntimeException(info.formatPretty)

case class IllegalUriException(info: ErrorInfo) extends ExceptionWithErrorInfo(info)

case class IllegalHeaderException(info: ErrorInfo) extends ExceptionWithErrorInfo(info)

case class InvalidContentLengthException(info: ErrorInfo) extends ExceptionWithErrorInfo(info)

case class ParsingException(info: ErrorInfo) extends ExceptionWithErrorInfo(info)

case class IllegalRequestException(info: ErrorInfo, status: ClientError) extends ExceptionWithErrorInfo(info)
object IllegalRequestException {
  def apply(status: ClientError): IllegalRequestException = apply(ErrorInfo(status.defaultMessage), status)
  def apply(status: ClientError, info: ErrorInfo): IllegalRequestException = apply(info.withFallbackSummary(status.defaultMessage), status)
  def apply(status: ClientError, detail: String): IllegalRequestException = apply(ErrorInfo(status.defaultMessage, detail), status)
}

case class IllegalResponseException(info: ErrorInfo) extends ExceptionWithErrorInfo(info)

case class EntityStreamException(info: ErrorInfo) extends ExceptionWithErrorInfo(info)

case class RequestTimeoutException(request: HttpRequest, message: String) extends RuntimeException(message)

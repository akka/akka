/*
 * Copyright (C) 2009-2014 Lightbend Inc. <http://www.lightbend.com>
 */

package akka.http.scaladsl.server.util

import TupleOps.FoldLeft
import BinaryPolyFunc.Case

private[util] abstract class TupleFoldInstances {

  type Aux[In, T, Op, Out0] = FoldLeft[In, T, Op] { type Out = Out0 }

  implicit def t0[In, Op]: Aux[In, Unit, Op, In] =
    new FoldLeft[In, Unit, Op] {
      type Out = In
      def apply(zero: In, tuple: Unit) = zero
    }

  implicit def t1[In, A, Op](implicit f: Case[In, A, Op]): Aux[In, Tuple1[A], Op, f.Out] =
    new FoldLeft[In, Tuple1[A], Op] {
      type Out = f.Out
      def apply(zero: In, tuple: Tuple1[A]) = f(zero, tuple._1)
    }

  [2..22#implicit def t1[In, [2..#T0#], X, T1, Op](implicit fold: Aux[In, Tuple0[[2..#T0#]], Op, X], f: Case[X, T1, Op]): Aux[In, Tuple1[[#T1#]], Op, f.Out] =
    new FoldLeft[In, Tuple1[[#T1#]], Op] {
      type Out = f.Out
      def apply(zero: In, t: Tuple1[[#T1#]]) =
        f(fold(zero, Tuple0([2..#t._0#])), t._1)
    }#
  ]
}
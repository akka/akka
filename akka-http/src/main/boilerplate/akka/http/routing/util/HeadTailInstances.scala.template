/*
 * Copyright (C) 2009-2014 Typesafe Inc. <http://www.typesafe.com>
 */

package akka.http.routing.util

private[util] abstract class HeadTailInstances {
  type Aux[L, H0, T0] = HeadTail[L] { type H = H0; type T = T0 }

  implicit def headTail1[T1]: Aux[Tuple1[T1], T1, Unit] =
    new HeadTail[Tuple1[T1]] {
      type H = T1
      type T = Unit

      def apply(in: Tuple1[T1]): (T1, Unit) = (in._1, ())
    }
  [1..21#implicit def headTail2[_H, [#T1#]]: Aux[Tuple2[_H, [#T1#]], _H, Tuple1[[#T1#]]] =
    new HeadTail[Tuple2[_H, [#T1#]]] {
      type H = _H
      type T = Tuple1[[#T1#]]

      def apply(in: Tuple2[_H, [#T1#]]): (_H, Tuple1[[#T1#]]) = (in._##1, Tuple1([#in._2#]))
    }#
  ]
}
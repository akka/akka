/*
 * Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
 */
package akka.http.javadsl.server.directives

import akka.http.javadsl.server.Route
import akka.http.javadsl.server.RouteResult
import akka.http.javadsl.server.RequestVal
import akka.http.javadsl.server.RequestContext
import scala.annotation.varargs
import scala.concurrent.Future

abstract class BasicDirectivesBase {
  /** INTERNAL API */
  private[http] def handle(extractions: RequestVal[_]*)(f: RequestContext â‡’ RouteResult): Route

  /**
   * Handles the route using the given function.
   * The function MUST NOT return `null`.
   *
   * If the `handler` is accessing request values these must be passed to this method in order for extraction to be performed.
   */
  @varargs def handleWith(handler: akka.japi.function.Function[RequestContext, RouteResult], extractions: RequestVal[_]*): Route =
    handle(extractions: _*)(ctx => handler(ctx))

  /**
   * Handles the route using the given function, completing the route once the returned [[scala.concurrent.Future]] completes.
   * The function MUST NOT return `null`.
   *
   * If the `handler` is accessing request values these must be passed to this method in order for extraction to be performed.
   */
  @varargs def handleWithAsync(handler: akka.japi.function.Function[RequestContext, Future[RouteResult]], extractions: RequestVal[_]*): Route =
    handle(extractions: _*)(ctx => ctx.completeWith(handler(ctx)))


  [..21#/**
   * Handles the route using the given function. The function MUST NOT return `null`.
   *
   * For convenience, using Java 8 lambda expressions as the `handler` function is recommended.
   * For Java 6 or 7 users the convenience [[akka.http.javadsl.server.Handler1]] class (which itself extends
   * [[akka.japi.function.Function2]] should prove to be useful, as it matches naming-wise with the number of
   * handled request values.
   */
  def handleWith1[[#T1#]]([#v1: RequestVal[T1]#], handler: akka.japi.function.Function2[RequestContext, [#T1#], RouteResult]): Route =
    handle([#v1#])(ctx => handler(ctx, [#v1.get(ctx)#]))

  /**
   * Handles the route using the given function, completing the route once the returned [[scala.concurrent.Future]] completes.
   * The function MUST NOT return `null`.
   *
   * For convenience, using Java 8 lambda expressions as the `handler` function is recommended.
   * For Java 6 or 7 users the convenience [[akka.http.javadsl.server.Handler1]] class (which itself extends
   * [[akka.japi.function.Function2]] should prove to be useful, as it matches naming-wise with the number of
   * handled request values.
   */
  def handleWithAsync1[[#T1#]]([#v1: RequestVal[T1]#], handler: akka.japi.function.Function2[RequestContext, [#T1#], Future[RouteResult]]): Route =
    handle([#v1#])(ctx => ctx.completeWith(handler(ctx, [#v1.get(ctx)#])))#

  ]

}

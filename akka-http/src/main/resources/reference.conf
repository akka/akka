#######################################
#   akka-http Reference Config File   #
#######################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

akka.http {

  routing {
    # Enables/disables the returning of more detailed error messages to the
    # client in the error response
    # Should be disabled for browser-facing APIs due to the risk of XSS attacks
    # and (probably) enabled for internal or non-browser APIs
    # (Note that akka-http will always produce log messages containing the full error details)
    verbose-error-messages = off

    # Enables/disables ETag and `If-Modified-Since` support for FileAndResourceDirectives
    file-get-conditional = on

    # Enables/disables the rendering of the "rendered by" footer in directory listings
    render-vanity-footer = yes

    # The maximum size between two requested ranges. Ranges with less space in between will be coalesced.
    #
    # When multiple ranges are requested, a server may coalesce any of the ranges that overlap or that are separated
    # by a gap that is smaller than the overhead of sending multiple parts, regardless of the order in which the
    # corresponding byte-range-spec appeared in the received Range header field. Since the typical overhead between
    # parts of a multipart/byteranges payload is around 80 bytes, depending on the selected representation's
    # media type and the chosen boundary parameter length, it can be less efficient to transfer many small
    # disjoint parts than it is to transfer the entire selected representation.
    range-coalescing-threshold = 80

    # The maximum number of allowed ranges per request.
    # Requests with more ranges will be rejected due to DOS suspicion.
    range-count-limit = 16

    # The maximum number of bytes per ByteString a decoding directive will produce
    # for an entity data stream.
    decode-max-bytes-per-chunk = 1m

    # Fully qualified config path which holds the dispatcher configuration
    # to be used by FlowMaterialiser when creating Actors for IO operations.
  file-io-dispatcher = ${akka.stream.blocking-io-dispatcher}
  }

  json-streaming {
    # Default streaming json rendering mode, when a route is completed with a Source[T, _] and
    # the content type is `application/json`.
    # The rendering modes differ in how they surround the json elements with commas / new-lines and or an array `[]` element.
    # Available modes:
    #  - line-by-line - resulting in: `{}\n{}\n{}\n...`
    #  - line-by-line-comma-separated - resulting in: `{},\n{},\n...`
    #  - compact - resulting in: `{}{}{}...`
    #  - compact-comma-separated - resulting in: `{},{},{},...`
    #  - compact-array  resulting in: `[{},{},{},...]`
    #    (the terminal `]` being signalled only when the stream completes successfully, i.e. not in the case of failure)
    rendering-mode = "line-by-line"

    # Max number of chars to be accepted when Framing an incoming streaming JSON entity body.
    # This setting is here for guarding against malicious requests, which open a JSON object (`{`) but never close it (`}`)
    max-object-size = 2m
  }
}

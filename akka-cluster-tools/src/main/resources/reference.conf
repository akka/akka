############################################
# Akka Cluster Tools Reference Config File #
############################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

# //#pub-sub-ext-config
# Settings for the DistributedPubSub extension
akka.cluster.pub-sub {
  # Actor name of the mediator actor, /user/distributedPubSubMediator
  name = distributedPubSubMediator

  # Start the mediator on members tagged with this role.
  # All members are used if undefined or empty.
  role = ""

  # The routing logic to use for 'Send'
  # Possible values: random, round-robin, broadcast
  routing-logic = random

  # How often the DistributedPubSubMediator should send out gossip information
  gossip-interval = 1s

  # Removed entries are pruned after this duration
  removed-time-to-live = 120s

  # Maximum number of elements to transfer in one message when synchronizing the registries.
  # Next chunk will be transferred in next round of gossip.
  max-delta-elements = 3000

}
# //#pub-sub-ext-config

# Protobuf serializer for cluster DistributedPubSubMeditor messages
akka.actor {
  serializers {
    akka-pubsub = "akka.cluster.pubsub.protobuf.DistributedPubSubMessageSerializer"
  }
  serialization-bindings {
    "akka.cluster.pubsub.DistributedPubSubMessage" = akka-pubsub
  }
  serialization-identifiers {
    "akka.cluster.pubsub.protobuf.DistributedPubSubMessageSerializer" = 9
  }
}


# //#receptionist-ext-config
# Settings for the ClusterReceptionistExtension
akka.cluster.client.receptionist {
  # Actor name of the ClusterReceptionist actor, /user/receptionist
  name = receptionist

  # Start the receptionist on members tagged with this role.
  # All members are used if undefined or empty.
  role = ""

  # The receptionist will send this number of contact points to the client
  number-of-contacts = 3

  # The actor that tunnel response messages to the client will be stopped
  # after this time of inactivity.
  response-tunnel-receive-timeout = 30s
}
# //#receptionist-ext-config

# //#cluster-client-mailbox-config
akka.cluster.client {
  mailbox {
    mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
    stash-capacity = 1000
  }
}
# //#cluster-client-mailbox-config


akka.cluster.singleton {
  # The actor name of the child singleton actor.
  singleton-name = "singleton"
  
  # Singleton among the nodes tagged with specified role.
  # If the role is not specified it's a singleton among all nodes in the cluster.
  role = ""
  
  # When a node is becoming oldest it sends hand-over request to previous oldest. 
  # This is retried with the 'retry-interval' until the previous oldest confirms
  # that the hand over has started, or this -max-hand-over-retries' limit has been
  # reached. If the retry limit is reached it takes the decision to be the new oldest
  # if previous oldest is unknown (typically removed), otherwise it initiates a new
  # round by throwing 'akka.cluster.singleton.ClusterSingletonManagerIsStuck' and expecting
  # restart with fresh state. For a cluster with many members you might need to increase
  # this retry limit because it takes longer time to propagate changes across all nodes.
  max-hand-over-retries = 10
  
  # When a oldest node leaves the cluster it is not oldest any more and then it sends
  # take over request to the new oldest to initiate the hand-over process. This is
  # retried with the 'retry-interval' until this retry limit has been reached. If the
  # retry limit is reached it initiates a new round by throwing 
  # 'akka.cluster.singleton.ClusterSingletonManagerIsStuck' and expecting restart with
  # fresh state. This will also cause the singleton actor to be stopped.
  # 'max-take-over-retries` must be less than 'max-hand-over-retries' to ensure that
  # new oldest doesn't start singleton actor before previous is stopped for certain
  # corner cases.
  max-take-over-retries = 5
  
  # Interval for hand over and take over messages
  retry-interval = 1s
}

akka.cluster.singleton-proxy {
  # The role of the cluster nodes where the singleton can be deployed. 
  # If the role is not specified then any node will do.
  role = ""
  
  # Interval at which the proxy will try to resolve the singleton instance.
  singleton-identification-interval = 1s 
}
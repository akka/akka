#
# Run the "postgres" trace (ps.trace) from the authors of the LIRS algorithm.
#
# LIRS: An Efficient Low Inter-reference Recency Set Replacement Policy to Improve Buffer Cache Performance
# Song Jiang and Xiaodong Zhang
#
# Download traces from: https://github.com/zhongch4g/LIRS2
#
# > akka-cluster-sharding/Test/runMain akka.cluster.sharding.passivation.simulator.Simulator lirs-trace-postgres
#
#   ╔═════════════════════╤═════════╤══════════╤═════════════╤══════════════╗
#   ║                 Run │  Active │ Accesses │ Activations │ Passivations ║
#   ╠═════════════════════╪═════════╪══════════╪═════════════╪══════════════╣
#   ║             OPT 125 │ 35.16 % │   10,448 │       6,774 │        6,654 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║             OPT 250 │ 53.33 % │   10,448 │       4,876 │        4,626 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║             OPT 500 │ 58.12 % │   10,448 │       4,376 │        3,876 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║            OPT 1000 │ 67.69 % │   10,448 │       3,376 │        2,376 ║
#   ╠═════════════════════╪═════════╪══════════╪═════════════╪══════════════╣
#   ║             LRU 125 │ 12.19 % │   10,448 │       9,174 │        9,054 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║             LRU 250 │ 13.95 % │   10,448 │       8,991 │        8,741 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║             LRU 500 │ 48.55 % │   10,448 │       5,376 │        4,876 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║            LRU 1000 │ 48.55 % │   10,448 │       5,376 │        4,376 ║
#   ╠═════════════════════╪═════════╪══════════╪═════════════╪══════════════╣
#   ║            SLRU 125 │  9.34 % │   10,448 │       9,472 │        9,362 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║            SLRU 250 │ 16.80 % │   10,448 │       8,693 │        8,443 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║            SLRU 500 │ 52.59 % │   10,448 │       4,953 │        4,453 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║           SLRU 1000 │ 52.59 % │   10,448 │       4,953 │        3,953 ║
#   ╠═════════════════════╪═════════╪══════════╪═════════════╪══════════════╣
#   ║           S4LRU 125 │  9.34 % │   10,448 │       9,472 │        9,352 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║           S4LRU 250 │ 16.80 % │   10,448 │       8,693 │        8,453 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║           S4LRU 500 │ 51.95 % │   10,448 │       5,020 │        4,540 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║          S4LRU 1000 │ 52.59 % │   10,448 │       4,953 │        3,953 ║
#   ╠═════════════════════╪═════════╪══════════╪═════════════╪══════════════╣
#   ║             MRU 125 │ 14.23 % │   10,448 │       8,961 │        8,841 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║             MRU 250 │ 30.84 % │   10,448 │       7,226 │        6,976 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║             MRU 500 │ 45.67 % │   10,448 │       5,676 │        5,176 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║            MRU 1000 │ 64.41 % │   10,448 │       3,718 │        2,718 ║
#   ╠═════════════════════╪═════════╪══════════╪═════════════╪══════════════╣
#   ║             LFU 125 │  9.34 % │   10,448 │       9,472 │        9,352 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║             LFU 250 │ 16.80 % │   10,448 │       8,693 │        8,443 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║             LFU 500 │ 52.59 % │   10,448 │       4,953 │        4,453 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║            LFU 1000 │ 52.59 % │   10,448 │       4,953 │        3,953 ║
#   ╠═════════════════════╪═════════╪══════════╪═════════════╪══════════════╣
#   ║           LFUDA 125 │ 12.89 % │   10,448 │       9,101 │        8,981 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║           LFUDA 250 │ 16.79 % │   10,448 │       8,694 │        8,444 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║           LFUDA 500 │ 52.58 % │   10,448 │       4,954 │        4,454 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║          LFUDA 1000 │ 52.58 % │   10,448 │       4,954 │        3,954 ║
#   ╠═════════════════════╪═════════╪══════════╪═════════════╪══════════════╣
#   ║     LRU/FS/SLRU 125 │ 30.64 % │   10,448 │       7,247 │        7,127 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║     LRU/FS/SLRU 250 │ 52.41 % │   10,448 │       4,972 │        4,722 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║     LRU/FS/SLRU 500 │ 55.98 % │   10,448 │       4,599 │        4,099 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║    LRU/FS/SLRU 1000 │ 66.56 % │   10,448 │       3,494 │        2,494 ║
#   ╠═════════════════════╪═════════╪══════════╪═════════════╪══════════════╣
#   ║  LRU/FS/SLRU/HC 125 │ 29.96 % │   10,448 │       7,318 │        7,198 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║  LRU/FS/SLRU/HC 250 │ 52.38 % │   10,448 │       4,975 │        4,725 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║  LRU/FS/SLRU/HC 500 │ 55.98 % │   10,448 │       4,599 │        4,099 ║
#   ╟─────────────────────┼─────────┼──────────┼─────────────┼──────────────╢
#   ║ LRU/FS/SLRU/HC 1000 │ 66.56 % │   10,448 │       3,494 │        2,494 ║
#   ╚═════════════════════╧═════════╧══════════╧═════════════╧══════════════╝
#

lirs-traces="lirs-traces"
lirs-traces=${?LIRS_TRACES}

akka.cluster.sharding {
  passivation.simulator {
    runs = [
      {
        name = "OPT 125"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = optimal-125
      },
      {
        name = "OPT 250"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = optimal-250
      },
      {
        name = "OPT 500"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = optimal-500
      },
      {
        name = "OPT 1000"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = optimal-1000
      },
      {
        name = "LRU 125"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lru-125
      },
      {
        name = "LRU 250"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lru-250
      },
      {
        name = "LRU 500"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lru-500
      },
      {
        name = "LRU 1000"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lru-1000
      },
      {
        name = "SLRU 125"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = slru-125
      },
      {
        name = "SLRU 250"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = slru-250
      },
      {
        name = "SLRU 500"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = slru-500
      },
      {
        name = "SLRU 1000"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = slru-1000
      },
      {
        name = "S4LRU 125"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = s4lru-125
      },
      {
        name = "S4LRU 250"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = s4lru-250
      },
      {
        name = "S4LRU 500"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = s4lru-500
      },
      {
        name = "S4LRU 1000"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = s4lru-1000
      },
      {
        name = "MRU 125"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = mru-125
      },
      {
        name = "MRU 250"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = mru-250
      },
      {
        name = "MRU 500"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = mru-500
      },
      {
        name = "MRU 1000"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = mru-1000
      },
      {
        name = "LFU 125"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lfu-125
      },
      {
        name = "LFU 250"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lfu-250
      },
      {
        name = "LFU 500"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lfu-500
      },
      {
        name = "LFU 1000"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lfu-1000
      },
      {
        name = "LFUDA 125"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lfuda-125
      },
      {
        name = "LFUDA 250"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lfuda-250
      },
      {
        name = "LFUDA 500"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lfuda-500
      },
      {
        name = "LFUDA 1000"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lfuda-1000
      },
      {
        name = "LRU/FS/SLRU 125"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lru-fs-slru-125
      },
      {
        name = "LRU/FS/SLRU 250"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lru-fs-slru-250
      },
      {
        name = "LRU/FS/SLRU 500"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lru-fs-slru-500
      },
      {
        name = "LRU/FS/SLRU 1000"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lru-fs-slru-1000
      },
      {
        name = "LRU/FS/SLRU/HC 125"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lru-fs-slru-hc-125
      },
      {
        name = "LRU/FS/SLRU/HC 250"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lru-fs-slru-hc-250
      },
      {
        name = "LRU/FS/SLRU/HC 500"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lru-fs-slru-hc-500
      },
      {
        name = "LRU/FS/SLRU/HC 1000"
        shards = 10
        regions = 1
        pattern = lirs-postgres
        strategy = lru-fs-slru-hc-1000
      },
    ]

    print-detailed-stats = true

    lirs-postgres {
      pattern = trace
      trace {
        format = lirs
        path = ${lirs-traces}"/ps.trace"
      }
    }

    optimal-125 {
      strategy = optimal
      optimal {
        per-region-limit = 125
      }
    }

    optimal-250 {
      strategy = optimal
      optimal {
        per-region-limit = 250
      }
    }

    optimal-500 {
      strategy = optimal
      optimal {
        per-region-limit = 500
      }
    }

    optimal-1000 {
      strategy = optimal
      optimal {
        per-region-limit = 1000
      }
    }

    lru-125 {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 125
      }
    }

    lru-250 {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 250
      }
    }

    lru-500 {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 500
      }
    }

    lru-1000 {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 1000
      }
    }

    slru-125 {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 125
        segmented {
          levels = 2
          proportions = [0.2, 0.8]
        }
      }
    }

    slru-250 {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 250
        segmented {
          levels = 2
          proportions = [0.2, 0.8]
        }
      }
    }

    slru-500 {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 500
        segmented {
          levels = 2
          proportions = [0.2, 0.8]
        }
      }
    }

    slru-1000 {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 1000
        segmented {
          levels = 2
          proportions = [0.2, 0.8]
        }
      }
    }

    s4lru-125 {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 125
        segmented.levels = 4
      }
    }

    s4lru-250 {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 250
        segmented.levels = 4
      }
    }

    s4lru-500 {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 500
        segmented.levels = 4
      }
    }

    s4lru-1000 {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 1000
        segmented.levels = 4
      }
    }

    mru-125 {
      strategy = most-recently-used
      most-recently-used {
        per-region-limit = 125
      }
    }

    mru-250 {
      strategy = most-recently-used
      most-recently-used {
        per-region-limit = 250
      }
    }

    mru-500 {
      strategy = most-recently-used
      most-recently-used {
        per-region-limit = 500
      }
    }

    mru-1000 {
      strategy = most-recently-used
      most-recently-used {
        per-region-limit = 1000
      }
    }

    lfu-125 {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 125
      }
    }

    lfu-250 {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 250
      }
    }

    lfu-500 {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 500
      }
    }

    lfu-1000 {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 1000
      }
    }

    lfuda-125 {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 125
        dynamic-aging = on
      }
    }

    lfuda-250 {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 250
        dynamic-aging = on
      }
    }

    lfuda-500 {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 500
        dynamic-aging = on
      }
    }

    lfuda-1000 {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 1000
        dynamic-aging = on
      }
    }

    lru-fs-slru {
      strategy = composite
      composite {
        admission {
          window.strategy = least-recently-used
          filter = frequency-sketch
          optimizer = none
        }
        main {
          strategy = least-recently-used
          least-recently-used {
            segmented {
              levels = 2
              proportions = [0.2, 0.8]
            }
          }
        }
      }
    }

    lru-fs-slru-125 = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru} {
      composite.per-region-limit = 125
    }

    lru-fs-slru-250 = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru} {
      composite.per-region-limit = 250
    }

    lru-fs-slru-500 = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru} {
      composite.per-region-limit = 500
    }

    lru-fs-slru-1000 = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru} {
      composite.per-region-limit = 1000
    }

    lru-fs-slru-hc = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru} {
      composite.admission.optimizer = hill-climbing
    }

    lru-fs-slru-hc-125 = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru-hc} {
      composite.per-region-limit = 125
    }

    lru-fs-slru-hc-250 = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru-hc} {
      composite.per-region-limit = 250
    }

    lru-fs-slru-hc-500 = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru-hc} {
      composite.per-region-limit = 500
    }

    lru-fs-slru-hc-1000 = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru-hc} {
      composite.per-region-limit = 1000
    }

  }
}

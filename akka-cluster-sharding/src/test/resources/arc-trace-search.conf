#
# Run the merged "search" trace (MergeS) from the authors of the ARC algorithm.
#
# Nimrod Megiddo and Dharmendra S. Modha, "ARC: A Self-Tuning, Low Overhead Replacement Cache".
#
# Download traces from the author's home page:
# https://researcher.watson.ibm.com/researcher/view_person_subpage.php?id=4700
#
# > akka-cluster-sharding/Test/runMain akka.cluster.sharding.passivation.simulator.Simulator arc-trace-search
#
#   ╔═════════════════════╤═════════╤════════════╤═════════════╤══════════════╗
#   ║                 Run │  Active │   Accesses │ Activations │ Passivations ║
#   ╠═════════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║            OPT 250k │ 30.13 % │ 37,656,092 │  26,309,294 │   26,059,294 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            OPT 500k │ 45.95 % │ 37,656,092 │  20,354,161 │   19,854,161 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║              OPT 1M │ 65.55 % │ 37,656,092 │  12,970,868 │   11,970,868 ║
#   ╠═════════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║            LRU 250k │  3.07 % │ 37,656,092 │  36,498,516 │   36,248,516 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            LRU 500k │  7.53 % │ 37,656,092 │  34,822,122 │   34,322,122 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║              LRU 1M │ 25.37 % │ 37,656,092 │  28,102,287 │   27,102,287 ║
#   ╠═════════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║           SLRU 250k │  9.59 % │ 37,656,092 │  34,044,825 │   33,794,825 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║           SLRU 500k │ 16.76 % │ 37,656,092 │  31,345,965 │   30,845,965 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║             SLRU 1M │ 27.49 % │ 37,656,092 │  27,305,632 │   26,305,632 ║
#   ╠═════════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║          S4LRU 250k │  9.78 % │ 37,656,092 │  33,973,161 │   33,723,161 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║          S4LRU 500k │ 17.04 % │ 37,656,092 │  31,241,138 │   30,741,138 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            S4LRU 1M │ 27.69 % │ 37,656,092 │  27,229,802 │   26,229,802 ║
#   ╠═════════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║            MRU 250k │  5.25 % │ 37,656,092 │  35,680,111 │   35,430,111 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            MRU 500k │ 10.50 % │ 37,656,092 │  33,702,975 │   33,202,975 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║              MRU 1M │ 20.79 % │ 37,656,092 │  29,826,997 │   28,826,997 ║
#   ╠═════════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║            LFU 250k │  9.04 % │ 37,656,092 │  34,253,102 │   34,003,102 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            LFU 500k │ 16.42 % │ 37,656,092 │  31,471,765 │   30,971,765 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║              LFU 1M │ 27.43 % │ 37,656,092 │  27,328,351 │   26,328,351 ║
#   ╠═════════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║          LFUDA 250k │  3.18 % │ 37,656,092 │  36,457,345 │   36,207,345 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║          LFUDA 500k │  8.95 % │ 37,656,092 │  34,285,981 │   33,785,981 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            LFUDA 1M │ 28.10 % │ 37,656,092 │  27,073,194 │   26,073,194 ║
#   ╠═════════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║    LRU/FS/SLRU 250k │ 13.05 % │ 37,656,092 │  32,741,656 │   32,491,656 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║    LRU/FS/SLRU 500k │ 24.89 % │ 37,656,092 │  28,281,835 │   27,781,835 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║      LRU/FS/SLRU 1M │ 44.63 % │ 37,656,092 │  20,850,711 │   19,850,711 ║
#   ╠═════════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║ LRU/FS/SLRU/HC 250k │ 12.48 % │ 37,656,092 │  32,955,813 │   32,705,813 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║ LRU/FS/SLRU/HC 500k │ 24.76 % │ 37,656,092 │  28,332,311 │   27,832,311 ║
#   ╟─────────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║   LRU/FS/SLRU/HC 1M │ 44.63 % │ 37,656,092 │  20,850,711 │   19,850,711 ║
#   ╚═════════════════════╧═════════╧════════════╧═════════════╧══════════════╝
#

arc-traces="arc-traces"
arc-traces=${?ARC_TRACES}

akka.cluster.sharding {
  passivation.simulator {
    runs = [
      {
        name = "OPT 250k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = optimal-25k
      },
      {
        name = "OPT 500k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = optimal-50k
      },
      {
        name = "OPT 1M"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = optimal-100k
      },
      {
        name = "LRU 250k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lru-25k
      },
      {
        name = "LRU 500k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lru-50k
      },
      {
        name = "LRU 1M"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lru-100k
      },
      {
        name = "SLRU 250k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = slru-25k
      },
      {
        name = "SLRU 500k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = slru-50k
      },
      {
        name = "SLRU 1M"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = slru-100k
      },
      {
        name = "S4LRU 250k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = s4lru-25k
      },
      {
        name = "S4LRU 500k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = s4lru-50k
      },
      {
        name = "S4LRU 1M"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = s4lru-100k
      },
      {
        name = "MRU 250k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = mru-25k
      },
      {
        name = "MRU 500k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = mru-50k
      },
      {
        name = "MRU 1M"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = mru-100k
      },
      {
        name = "LFU 250k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lfu-25k
      },
      {
        name = "LFU 500k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lfu-50k
      },
      {
        name = "LFU 1M"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lfu-100k
      },
      {
        name = "LFUDA 250k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lfuda-25k
      },
      {
        name = "LFUDA 500k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lfuda-50k
      },
      {
        name = "LFUDA 1M"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lfuda-100k
      },
      {
        name = "LRU/FS/SLRU 250k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lru-fs-slru-25k
      },
      {
        name = "LRU/FS/SLRU 500k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lru-fs-slru-50k
      },
      {
        name = "LRU/FS/SLRU 1M"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lru-fs-slru-100k
      },
      {
        name = "LRU/FS/SLRU/HC 250k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lru-fs-slru-hc-25k
      },
      {
        name = "LRU/FS/SLRU/HC 500k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lru-fs-slru-hc-50k
      },
      {
        name = "LRU/FS/SLRU/HC 1M"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lru-fs-slru-hc-100k
      },
    ]

    print-detailed-stats = true

    arc-search-merged {
      pattern = trace
      trace {
        format = arc
        path = ${arc-traces}"/MergeS.lis"
      }
    }

    optimal-25k {
      strategy = optimal
      optimal {
        per-region-limit = 25000
      }
    }

    optimal-50k {
      strategy = optimal
      optimal {
        per-region-limit = 50000
      }
    }

    optimal-100k {
      strategy = optimal
      optimal {
        per-region-limit = 100000
      }
    }

    lru-25k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 25000
      }
    }

    lru-50k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 50000
      }
    }

    lru-100k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 100000
      }
    }

    slru-25k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 25000
        segmented {
          levels = 2
          proportions = [0.2, 0.8]
        }
      }
    }

    slru-50k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 50000
        segmented {
          levels = 2
          proportions = [0.2, 0.8]
        }
      }
    }

    slru-100k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 100000
        segmented {
          levels = 2
          proportions = [0.2, 0.8]
        }
      }
    }

    s4lru-25k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 25000
        segmented.levels = 4
      }
    }

    s4lru-50k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 50000
        segmented.levels = 4
      }
    }

    s4lru-100k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 100000
        segmented.levels = 4
      }
    }

    mru-25k {
      strategy = most-recently-used
      most-recently-used {
        per-region-limit = 25000
      }
    }

    mru-50k {
      strategy = most-recently-used
      most-recently-used {
        per-region-limit = 50000
      }
    }

    mru-100k {
      strategy = most-recently-used
      most-recently-used {
        per-region-limit = 100000
      }
    }

    lfu-25k {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 25000
      }
    }

    lfu-50k {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 50000
      }
    }

    lfu-100k {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 100000
      }
    }

    lfuda-25k {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 25000
        dynamic-aging = on
      }
    }

    lfuda-50k {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 50000
        dynamic-aging = on
      }
    }

    lfuda-100k {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 100000
        dynamic-aging = on
      }
    }

    lru-fs-slru {
      strategy = composite
      composite {
        admission {
          window.strategy = least-recently-used
          filter = frequency-sketch
          optimizer = none
        }
        main {
          strategy = least-recently-used
          least-recently-used {
            segmented {
              levels = 2
              proportions = [0.2, 0.8]
            }
          }
        }
      }
    }

    lru-fs-slru-25k = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru} {
      composite.per-region-limit = 25000
    }

    lru-fs-slru-50k = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru} {
      composite.per-region-limit = 50000
    }

    lru-fs-slru-100k = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru} {
      composite.per-region-limit = 100000
    }

    lru-fs-slru-hc = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru} {
      composite.admission.optimizer = hill-climbing
    }

    lru-fs-slru-hc-25k = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru-hc} {
      composite.per-region-limit = 25000
    }

    lru-fs-slru-hc-50k = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru-hc} {
      composite.per-region-limit = 50000
    }

    lru-fs-slru-hc-100k = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru-hc} {
      composite.per-region-limit = 100000
    }

  }
}

#
# Run the merged "search" trace (MergeS) from the authors of the ARC algorithm.
#
# Nimrod Megiddo and Dharmendra S. Modha, "ARC: A Self-Tuning, Low Overhead Replacement Cache".
#
# Download traces from the author's home page:
# https://researcher.watson.ibm.com/researcher/view_person_subpage.php?id=4700
#
# > akka-cluster-sharding/Test/runMain akka.cluster.sharding.passivation.simulator.Simulator arc-trace-search
#
#   ╔══════════╤═════════╤════════════╤═════════════╤══════════════╗
#   ║      Run │  Active │   Accesses │ Activations │ Passivations ║
#   ╠══════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║ LRU 250k │  3.07 % │ 37,656,092 │  36,498,516 │   36,248,516 ║
#   ╟──────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║ LRU 500k │  7.53 % │ 37,656,092 │  34,822,122 │   34,322,122 ║
#   ╟──────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║   LRU 1M │ 25.37 % │ 37,656,092 │  28,102,287 │   27,102,287 ║
#   ╟──────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║ MRU 250k │  5.25 % │ 37,656,092 │  35,680,111 │   35,430,111 ║
#   ╟──────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║ MRU 500k │ 10.50 % │ 37,656,092 │  33,702,975 │   33,202,975 ║
#   ╟──────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║   MRU 1M │ 20.79 % │ 37,656,092 │  29,826,997 │   28,826,997 ║
#   ╟──────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║ LFU 250k │  9.04 % │ 37,656,092 │  34,253,102 │   34,003,102 ║
#   ╟──────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║ LFU 500k │ 16.42 % │ 37,656,092 │  31,471,765 │   30,971,765 ║
#   ╟──────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║   LFU 1M │ 27.43 % │ 37,656,092 │  27,328,351 │   26,328,351 ║
#   ╚══════════╧═════════╧════════════╧═════════════╧══════════════╝
#

arc-traces="arc-traces"
arc-traces=${?ARC_TRACES}

akka.cluster.sharding {
  passivation.simulator {
    runs = [
      {
        name = "LRU 250k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lru-25k
      },
      {
        name = "LRU 500k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lru-50k
      },
      {
        name = "LRU 1M"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lru-100k
      },
      {
        name = "MRU 250k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = mru-25k
      },
      {
        name = "MRU 500k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = mru-50k
      },
      {
        name = "MRU 1M"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = mru-100k
      },
      {
        name = "LFU 250k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lfu-25k
      },
      {
        name = "LFU 500k"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lfu-50k
      },
      {
        name = "LFU 1M"
        shards = 100
        regions = 10
        pattern = arc-search-merged
        strategy = lfu-100k
      },
    ]

    print-detailed-stats = true

    arc-search-merged {
      pattern = trace
      trace {
        format = arc
        path = ${arc-traces}"/MergeS.lis"
      }
    }

    lru-25k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 25000
      }
    }

    lru-50k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 50000
      }
    }

    lru-100k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 100000
      }
    }

    mru-25k {
      strategy = most-recently-used
      most-recently-used {
        per-region-limit = 25000
      }
    }

    mru-50k {
      strategy = most-recently-used
      most-recently-used {
        per-region-limit = 50000
      }
    }

    mru-100k {
      strategy = most-recently-used
      most-recently-used {
        per-region-limit = 100000
      }
    }

    lfu-25k {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 25000
      }
    }

    lfu-50k {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 50000
      }
    }

    lfu-100k {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 100000
      }
    }
  }
}

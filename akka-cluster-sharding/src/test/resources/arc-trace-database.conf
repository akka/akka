#
# Run the "database" trace (DS1) from the authors of the ARC algorithm.
#
# Nimrod Megiddo and Dharmendra S. Modha, "ARC: A Self-Tuning, Low Overhead Replacement Cache".
#
# Download traces from the author's home page:
# https://researcher.watson.ibm.com/researcher/view_person_subpage.php?id=4700
#
# > akka-cluster-sharding/Test/runMain akka.cluster.sharding.passivation.simulator.Simulator arc-trace-database
#
#   ╔═══════════════════╤═════════╤════════════╤═════════════╤══════════════╗
#   ║               Run │  Active │   Accesses │ Activations │ Passivations ║
#   ╠═══════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║            OPT 1M │ 20.19 % │ 43,704,979 │  34,879,633 │   33,879,633 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            OPT 2M │ 31.79 % │ 43,704,979 │  29,810,905 │   27,810,905 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            OPT 4M │ 48.09 % │ 43,704,979 │  22,685,636 │   18,685,636 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            OPT 8M │ 74.93 % │ 43,704,979 │  10,957,661 │    2,957,661 ║
#   ╠═══════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║            LRU 1M │  3.09 % │ 43,704,979 │  42,356,500 │   41,356,500 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            LRU 2M │ 10.75 % │ 43,704,979 │  39,007,141 │   37,007,141 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            LRU 4M │ 20.24 % │ 43,704,979 │  34,857,131 │   30,857,131 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            LRU 8M │ 43.03 % │ 43,704,979 │  24,896,638 │   16,896,638 ║
#   ╠═══════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║           SLRU 1M │  6.13 % │ 43,704,979 │  41,026,869 │   40,026,869 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║           SLRU 2M │ 23.37 % │ 43,704,979 │  33,489,560 │   31,489,560 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║           SLRU 4M │ 39.06 % │ 43,704,979 │  26,632,624 │   22,632,624 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║           SLRU 8M │ 57.55 % │ 43,704,979 │  18,552,089 │   10,552,089 ║
#   ╠═══════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║          S4LRU 1M │  6.13 % │ 43,704,979 │  41,026,869 │   40,026,869 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║          S4LRU 2M │ 16.74 % │ 43,704,979 │  36,387,353 │   34,387,353 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║          S4LRU 4M │ 30.27 % │ 43,704,979 │  30,477,096 │   26,477,096 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║          S4LRU 8M │ 57.86 % │ 43,704,979 │  18,419,181 │   10,419,181 ║
#   ╠═══════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║            MRU 1M │ 11.92 % │ 43,704,979 │  38,493,369 │   37,493,369 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            MRU 2M │ 25.67 % │ 43,704,979 │  32,486,285 │   30,486,285 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            MRU 4M │ 41.82 % │ 43,704,979 │  25,429,608 │   21,429,608 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            MRU 8M │ 68.01 % │ 43,704,979 │  13,980,246 │    5,980,246 ║
#   ╠═══════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║            LFU 1M │  6.13 % │ 43,704,979 │  41,026,869 │   40,026,869 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            LFU 2M │ 23.39 % │ 43,704,979 │  33,482,361 │   31,482,361 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            LFU 4M │ 39.06 % │ 43,704,979 │  26,632,624 │   22,632,624 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║            LFU 8M │ 57.55 % │ 43,704,979 │  18,552,089 │   10,552,089 ║
#   ╠═══════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║          LFUDA 1M │  3.25 % │ 43,704,979 │  42,285,825 │   41,285,825 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║          LFUDA 2M │ 11.02 % │ 43,704,979 │  38,890,280 │   36,890,280 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║          LFUDA 4M │ 21.96 % │ 43,704,979 │  34,107,344 │   30,107,344 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║          LFUDA 8M │ 54.72 % │ 43,704,979 │  19,790,371 │   11,790,371 ║
#   ╠═══════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║    LRU/FS/SLRU 1M │ 14.36 % │ 43,704,979 │  37,428,825 │   36,428,825 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║    LRU/FS/SLRU 2M │ 28.61 % │ 43,704,979 │  31,200,295 │   29,200,295 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║    LRU/FS/SLRU 4M │ 45.36 % │ 43,704,979 │  23,882,207 │   19,882,207 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║    LRU/FS/SLRU 8M │ 70.73 % │ 43,704,979 │  12,791,039 │    4,791,039 ║
#   ╠═══════════════════╪═════════╪════════════╪═════════════╪══════════════╣
#   ║ LRU/FS/SLRU/HC 1M │ 14.28 % │ 43,704,979 │  37,463,497 │   36,463,497 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║ LRU/FS/SLRU/HC 2M │ 28.61 % │ 43,704,979 │  31,200,295 │   29,200,295 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║ LRU/FS/SLRU/HC 4M │ 45.36 % │ 43,704,979 │  23,882,207 │   19,882,207 ║
#   ╟───────────────────┼─────────┼────────────┼─────────────┼──────────────╢
#   ║ LRU/FS/SLRU/HC 8M │ 70.73 % │ 43,704,979 │  12,791,039 │    4,791,039 ║
#   ╚═══════════════════╧═════════╧════════════╧═════════════╧══════════════╝
#

arc-traces="arc-traces"
arc-traces=${?ARC_TRACES}

akka.cluster.sharding {
  passivation.simulator {
    runs = [
      {
       name = "OPT 1M"
       shards = 100
       regions = 10
       pattern = arc-database
       strategy = optimal-100k
      },
      {
        name = "OPT 2M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = optimal-200k
      },
      {
        name = "OPT 4M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = optimal-400k
      },
      {
        name = "OPT 8M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = optimal-800k
      },
      {
        name = "LRU 1M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lru-100k
      },
      {
        name = "LRU 2M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lru-200k
      },
      {
        name = "LRU 4M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lru-400k
      },
      {
        name = "LRU 8M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lru-800k
      },
      {
        name = "SLRU 1M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = slru-100k
      },
      {
        name = "SLRU 2M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = slru-200k
      },
      {
        name = "SLRU 4M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = slru-400k
      },
      {
        name = "SLRU 8M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = slru-800k
      },
      {
        name = "S4LRU 1M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = s4lru-100k
      },
      {
        name = "S4LRU 2M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = s4lru-200k
      },
      {
        name = "S4LRU 4M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = s4lru-400k
      },
      {
        name = "S4LRU 8M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = s4lru-800k
      },
      {
        name = "MRU 1M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = mru-100k
      },
      {
        name = "MRU 2M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = mru-200k
      },
      {
        name = "MRU 4M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = mru-400k
      },
      {
        name = "MRU 8M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = mru-800k
      },
      {
        name = "LFU 1M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lfu-100k
      },
      {
        name = "LFU 2M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lfu-200k
      },
      {
        name = "LFU 4M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lfu-400k
      },
      {
        name = "LFU 8M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lfu-800k
      },
      {
        name = "LFUDA 1M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lfuda-100k
      },
      {
        name = "LFUDA 2M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lfuda-200k
      },
      {
        name = "LFUDA 4M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lfuda-400k
      },
      {
        name = "LFUDA 8M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lfuda-800k
      },
      {
        name = "LRU/FS/SLRU 1M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lru-fs-slru-100k
      },
      {
        name = "LRU/FS/SLRU 2M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lru-fs-slru-200k
      },
      {
        name = "LRU/FS/SLRU 4M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lru-fs-slru-400k
      },
      {
        name = "LRU/FS/SLRU 8M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lru-fs-slru-800k
      },
      {
        name = "LRU/FS/SLRU/HC 1M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lru-fs-slru-hc-100k
      },
      {
        name = "LRU/FS/SLRU/HC 2M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lru-fs-slru-hc-200k
      },
      {
        name = "LRU/FS/SLRU/HC 4M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lru-fs-slru-hc-400k
      },
      {
        name = "LRU/FS/SLRU/HC 8M"
        shards = 100
        regions = 10
        pattern = arc-database
        strategy = lru-fs-slru-hc-800k
      },
    ]

    print-detailed-stats = true

    arc-database {
      pattern = trace
      trace {
        format = arc
        path = ${arc-traces}"/DS1.lis"
      }
    }

    optimal-100k {
      strategy = optimal
      optimal {
        per-region-limit = 100000
      }
    }

    optimal-200k {
      strategy = optimal
      optimal {
        per-region-limit = 200000
      }
    }

    optimal-400k {
      strategy = optimal
      optimal {
        per-region-limit = 400000
      }
    }

    optimal-800k {
      strategy = optimal
      optimal {
        per-region-limit = 800000
      }
    }

    lru-100k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 100000
      }
    }

    lru-200k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 200000
      }
    }

    lru-400k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 400000
      }
    }

    lru-800k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 800000
      }
    }

    slru-100k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 100000
        segmented = {
          levels = 2
          proportions = [0.2, 0.8]
        }
      }
    }

    slru-200k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 200000
        segmented = {
          levels = 2
          proportions = [0.2, 0.8]
        }
      }
    }

    slru-400k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 400000
        segmented = {
          levels = 2
          proportions = [0.2, 0.8]
        }
      }
    }

    slru-800k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 800000
        segmented = {
          levels = 2
          proportions = [0.2, 0.8]
        }
      }
    }

    s4lru-100k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 100000
        segmented.levels = 4
      }
    }

    s4lru-200k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 200000
        segmented.levels = 4
      }
    }

    s4lru-400k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 400000
        segmented.levels = 4
      }
    }

    s4lru-800k {
      strategy = least-recently-used
      least-recently-used {
        per-region-limit = 800000
        segmented.levels = 4
      }
    }

    mru-100k {
      strategy = most-recently-used
      most-recently-used {
        per-region-limit = 100000
      }
    }

    mru-200k {
      strategy = most-recently-used
      most-recently-used {
        per-region-limit = 200000
      }
    }

    mru-400k {
      strategy = most-recently-used
      most-recently-used {
        per-region-limit = 400000
      }
    }

    mru-800k {
      strategy = most-recently-used
      most-recently-used {
        per-region-limit = 800000
      }
    }

    lfu-100k {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 100000
      }
    }

    lfu-200k {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 200000
      }
    }

    lfu-400k {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 400000
      }
    }

    lfu-800k {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 800000
      }
    }

    lfuda-100k {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 100000
        dynamic-aging = on
      }
    }

    lfuda-200k {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 200000
        dynamic-aging = on
      }
    }

    lfuda-400k {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 400000
        dynamic-aging = on
      }
    }

    lfuda-800k {
      strategy = least-frequently-used
      least-frequently-used {
        per-region-limit = 800000
        dynamic-aging = on
      }
    }

    lru-fs-slru {
      strategy = composite
      composite {
        admission {
          window.strategy = least-recently-used
          filter = frequency-sketch
          optimizer = none
        }
        main {
          strategy = least-recently-used
          least-recently-used {
            segmented {
              levels = 2
              proportions = [0.2, 0.8]
            }
          }
        }
      }
    }

    lru-fs-slru-100k = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru} {
      composite.per-region-limit = 100000
    }

    lru-fs-slru-200k = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru} {
      composite.per-region-limit = 200000
    }

    lru-fs-slru-400k = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru} {
      composite.per-region-limit = 400000
    }

    lru-fs-slru-800k = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru} {
      composite.per-region-limit = 800000
    }

    lru-fs-slru-hc = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru} {
      composite.admission.optimizer = hill-climbing
    }

    lru-fs-slru-hc-100k = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru-hc} {
      composite.per-region-limit = 100000
    }

    lru-fs-slru-hc-200k = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru-hc} {
      composite.per-region-limit = 200000
    }

    lru-fs-slru-hc-400k = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru-hc} {
      composite.per-region-limit = 400000
    }

    lru-fs-slru-hc-800k = ${akka.cluster.sharding.passivation.simulator.lru-fs-slru-hc} {
      composite.per-region-limit = 800000
    }

  }
}

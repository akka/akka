#####################################
# Akka Remote Reference Config File #
#####################################

# This the reference config file has all the default settings.
# Make your edits/overrides in your application.conf.

akka {

  actor {

    deployment {

      default {

        # if this is set to a valid remote address, the named actor will be deployed
        # at that node e.g. "akka://sys@host:port"
        remote = ""

        target {

          # A list of hostnames and ports for instantiating the children of a
          # non-direct router
          #   The format should be on "akka://sys@host:port", where:
          #    - sys is the remote actor system name
          #    - hostname can be either hostname or IP address the remote actor
          #      should connect to
          #    - port should be the port for the remote server on the other node
          # The number of actor instances to be spawned is still taken from the
          # nr-of-instances setting as for local routers; the instances will be
          # distributed round-robin among the given nodes.
          nodes = []

        }
      }
    }
  }

  remote {

    # Which implementation of akka.remote.RemoteSupport to use
    # default is a TCP-based remote transport based on Netty
    transport = "akka.remote.netty.NettyRemoteSupport"

    # In case of increased latency / overflow how long
    # should we wait (blocking the sender) until we deem the send to be cancelled?
    # 0 means "never backoff", any positive number will indicate time to block at most.
    backoff-timeout = 0ms

    use-compression = off

    # Generate your own with '$AKKA_HOME/scripts/generate_config_with_secure_cookie.sh'
    #     or using 'akka.util.Crypt.generateSecureCookie'
    secure-cookie = ""

    # Timeout for ACK of cluster operations, lik checking actor out etc.
    remote-daemon-ack-timeout = 30s

    # Reuse inbound connections for outbound messages
    use-passive-connections = on

    # accrual failure detection config
    failure-detector {

      # defines the failure detector threshold
      #     A low threshold is prone to generate many wrong suspicions but ensures
      #     a quick detection in the event of a real crash. Conversely, a high
      #     threshold generates fewer mistakes but needs more time to detect
      #     actual crashes
      threshold = 8

      max-sample-size = 1000
    }

    gossip {
      initialDelay = 5s
      frequency = 1s
    }

    # The dispatcher used for remote system messages
    compute-grid-dispatcher {
      # defaults to same settings as default-dispatcher
      name = ComputeGridDispatcher
    }

    # The dispatcher used for the system actor "network-event-sender"
    network-event-sender-dispatcher {
      type = PinnedDispatcher
    }

    server {
      # The hostname or ip to bind the remoting to,
      # InetAddress.getLocalHost.getHostAddress is used if empty
      hostname = ""

      # The default remote server port clients should connect to.
      # Default is 2552 (AKKA), use 0 if you want a random available port
      port = 2552

      # Increase this if you want to be able to send messages with large payloads
      message-frame-size = 1 MiB

      # Timeout duration
      connection-timeout = 120s

      # Should the remote server require that it peers share the same secure-cookie
      # (defined in the 'remote' section)?
      require-cookie = off

      # Enable untrusted mode for full security of server managed actors, allows
      # untrusted clients to connect.
      untrusted-mode = off

      # Sets the size of the connection backlog
      backlog = 4096

      # Length in akka.time-unit how long core threads will be kept alive if idling
      execution-pool-keepalive = 60s

      # Size of the core pool of the remote execution unit
      execution-pool-size = 4

      # Maximum channel size, 0 for off
      max-channel-memory-size = 0b

      # Maximum total size of all channels, 0 for off
      max-total-memory-size = 0b
    }

    client {
      reconnect-delay = 5s
      read-timeout = 3600s
      message-frame-size = 1 MiB
      # Maximum time window that a client should try to reconnect for
      reconnection-time-window = 600s
    }
  }

  cluster {
    seed-nodes = []
  }
}

/**
 * Copyright (C) 2009-2011 Typesafe Inc. <http://www.typesafe.com>
 */

option java_package = "akka.remote";
option optimize_for = SPEED;

/******************************************
  Compile with:
  cd ./akka-remote/src/main/protocol
  protoc RemoteProtocol.proto --java_out ../java
*******************************************/

message AkkaRemoteProtocol {
  optional RemoteMessageProtocol message = 1;
  optional RemoteControlProtocol instruction = 2;
}

/**
 * Defines a remote message.
 */
message RemoteMessageProtocol {
  required ActorRefProtocol recipient = 1;
  optional MessageProtocol message = 2;
  optional ExceptionProtocol exception = 3;
  optional ActorRefProtocol sender = 4;
  repeated MetadataEntryProtocol metadata = 5;
}

/**
 * Defines some control messages for the remoting
 */
message RemoteControlProtocol {
  required CommandType commandType = 1;
  optional string cookie = 2;
  optional AddressProtocol origin = 3;
}

/**
 * Defines the type of the RemoteControlProtocol command type
 */
enum CommandType {
  CONNECT = 1;
  SHUTDOWN = 2;
}

/**
 * Defines the type of the ReplicationStorage
 */
enum ReplicationStorageType {
  TRANSIENT = 1;
  TRANSACTION_LOG = 2;
  DATA_GRID = 3;
}

/**
 * Defines the type of the ReplicationStrategy
 */
enum ReplicationStrategyType {
  WRITE_THROUGH = 1;
  WRITE_BEHIND = 2;
}

/**
 * Defines a remote ActorRef that "remembers" and uses its original Actor instance
 * on the original node.
 */
message ActorRefProtocol {
  required string host = 1;
  required uint32 port = 2;
  required string path = 3;
}

/**
 * Defines a message.
 */
message MessageProtocol {
  required bytes message = 1;
  optional bytes messageManifest = 2;
}

/**
 * Defines a UUID.
 */
message UuidProtocol {
  required uint64 high = 1;
  required uint64 low = 2;
}

/**
 * Defines a meta data entry.
 */
message MetadataEntryProtocol {
  required string key = 1;
  required bytes value = 2;
}

/**
 * Defines a remote address.
 */
message AddressProtocol {
  required string hostname = 1;
  required uint32 port = 2;
}

/**
 * Defines an exception.
 */
message ExceptionProtocol {
  required string classname  = 1;
  required string message = 2;
}

/**
 * Defines the remote system daemon message.
 */
message RemoteSystemDaemonMessageProtocol {
  required RemoteSystemDaemonMessageType messageType = 1;
  optional string actorPath = 2;
  optional bytes payload = 3;
  optional UuidProtocol replicateActorFromUuid = 4;
}

/**
 * Defines the remote system daemon message type.
 */
enum RemoteSystemDaemonMessageType {
  STOP = 1;
  USE = 2;
  RELEASE = 3;
  MAKE_AVAILABLE = 4;
  MAKE_UNAVAILABLE = 5;
  DISCONNECT = 6;
  RECONNECT = 7;
  RESIGN = 8;
  GOSSIP = 9;
  FAIL_OVER_CONNECTIONS = 20;
  FUNCTION_FUN0_UNIT = 21;
  FUNCTION_FUN0_ANY = 22;
  FUNCTION_FUN1_ARG_UNIT = 23;
  FUNCTION_FUN1_ARG_ANY = 24;
}

/**
 * Defines the durable mailbox message.
 */
message DurableMailboxMessageProtocol {
  required ActorRefProtocol recipient= 1;
  optional ActorRefProtocol sender = 2;
  required bytes message = 3;
}

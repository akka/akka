/**
 * Copyright (C) 2015 Typesafe Inc. <http://www.typesafe.com>
 */
package akka.stream.javadsl

import akka.stream.scaladsl
import akka.stream.{ Inlet, Shape, Graph }
import akka.japi.function

trait SinkCreate {

  /**
   * Creates a `Sink` by using a `FlowGraph.Builder[Unit]` on a block that expects
   * a [[FlowGraph.Builder]] and returns an [[Inlet]].
   */
  def create[T](block: function.Function[FlowGraph.Builder[Unit], Inlet[T]]): Sink[T, Unit] =
    new Sink(scaladsl.Sink() { b ⇒ block.apply(b.asJava) })

  /**
   * Creates a `Sink` by importing the given graph (using `builder.graph()`) and calling the provided create function
   * with the `FlowGraph.Builder[M]` and the [[Shape]] resulting from importing the graph.
   * The create function is expected to return the created Sink's [[Inlet]].
   */
  def create[T, S <: Shape, M](g1: Graph[S, M],
      block: function.Function2[FlowGraph.Builder[M], S, Inlet[T]]): Sink[T, M] =
    new Sink(scaladsl.Sink(g1) { b ⇒ s => block.apply(b.asJava, s) })

  /**
   * Creates a `Sink` by importing the given graphs (using `builder.graph()`) and calling the provided create function
   * with the `FlowGraph.Builder[M]` and the [[Shape]]s resulting from importing the graphs.
   * The create function is expected to return the created Sink's [[Inlet]].
   */
   def create[T, S1 <: Shape, S2 <: Shape, M1, M2, M](g1: Graph[S1, M1], g2: Graph[S2, M2], combineMat: function.Function2[M1, M2, M],
      block: function.Function3[FlowGraph.Builder[M], S1, S2, Inlet[T]]): Sink[T, M] =
    new Sink(scaladsl.Sink(g1, g2)(combineMat.apply _) { b => (s1, s2) => block.apply(b.asJava, s1, s2) })

  [3..21#/**
   * Creates a `Sink` by importing the given graphs (using `builder.graph()`) and calling the provided create function
   * with the `FlowGraph.Builder[M]` and the [[Shape]]s resulting from importing the graphs.
   * The create function is expected to return the created Sink's [[Inlet]].
   */
  def create1[T, [#S1 <: Shape#], [#M1#], M]([#g1: Graph[S1, M1]#], combineMat: function.Function1[[#M1#], M],
      block: function.Function2[FlowGraph.Builder[M], [#S1#], Inlet[T]]): Sink[T, M] =
    new Sink(scaladsl.Sink([#g1#])(combineMat.apply _) { b => ([#s1#]) => block.apply(b.asJava, [#s1#]) })#
  
  ]

}

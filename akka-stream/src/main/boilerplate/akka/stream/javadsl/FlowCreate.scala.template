/**
 * Copyright (C) 2015 Typesafe Inc. <http://www.typesafe.com>
 */
package akka.stream.javadsl

import akka.stream.scaladsl
import akka.stream.{ Inlet, Outlet, Shape, Graph }
import akka.japi.Pair

trait FlowCreate {

  import language.implicitConversions
  private implicit def p[A, B](pair: Pair[A, B]): (A, B) = pair.first -> pair.second

  /**
   * Creates a Flow by passing a [[FlowGraph.Builder]] to the given create function.
   *
   * The create function is expected to return a pair of [[Inlet]] and [[Outlet]] which correspond to the created Flows input and output ports.
   */
  def create[I, O](block: japi.Function[FlowGraph.Builder[Unit], Inlet[I] Pair Outlet[O]]): Flow[I, O, Unit] =
    new Flow(scaladsl.Flow() { b ⇒ block.apply(b.asJava) })

  /**
   * Creates a Flow by passing a [[FlowGraph.Builder]] to the given create function.
   * The given graph will be imported (using `builder.graph()`) and the resulting shape will be passed to the create function along with the builder.
   *
   * The create function is expected to return a pair of [[Inlet]] and [[Outlet]] which correspond to the created Flows input and output ports.
   */
  def create[I, O, S <: Shape, M](g1: Graph[S, M], block: japi.Function2[FlowGraph.Builder[M], S, Inlet[I] Pair Outlet[O]]): Flow[I, O, M] =
    new Flow(scaladsl.Flow(g1) { b ⇒ s => block.apply(b.asJava, s) })

  /**
   * Creates a Flow by passing a [[FlowGraph.Builder]] to the given create function.
   * The given graph will be imported (using `builder.graph()`) and the resulting shape will be passed to the create function along with the builder.
   *
   * The create function is expected to return a pair of [[Inlet]] and [[Outlet]] which correspond to the created Flows input and output ports.
   */
  def create[I, O, S1 <: Shape, S2 <: Shape, M1, M2, M](g1: Graph[S1, M1], g2: Graph[S2, M2], combineMat: japi.Function2[M1, M2, M],
      block: japi.Function3[FlowGraph.Builder[M], S1, S2, Inlet[I] Pair Outlet[O]]): Flow[I, O, M] =
    new Flow(scaladsl.Flow(g1, g2)(combineMat.apply _) { b => (s1, s2) => block.apply(b.asJava, s1, s2) })

  [3..21#/**
   * Creates a Flow by passing a [[FlowGraph.Builder]] to the given create function.
   * The given graph will be imported (using `builder.graph()`) and the resulting shape will be passed to the create function along with the builder.
   *
   * The create function is expected to return a pair of [[Inlet]] and [[Outlet]] which correspond to the created Flows input and output ports.
   */
  def create1[I, O, [#S1 <: Shape#], [#M1#], M]([#g1: Graph[S1, M1]#], combineMat: japi.Function1[[#M1#], M],
      block: japi.Function2[FlowGraph.Builder[M], [#S1#], Inlet[I] Pair Outlet[O]]): Flow[I, O, M] =
    new Flow(scaladsl.Flow([#g1#])(combineMat.apply _) { b => ([#s1#]) => block.apply(b.asJava, [#s1#]) })#
  
  ]

}

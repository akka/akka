/**
 * Copyright (C) 2015 Typesafe Inc. <http://www.typesafe.com>
 */
package akka.stream.javadsl

import akka.stream.scaladsl
import akka.stream.{ Inlet, Shape, Graph }
import akka.japi.function

trait GraphCreate {

  import language.implicitConversions
  private implicit def r[M](run: scaladsl.RunnableGraph[M]): RunnableGraph[M] = new RunnableGraphAdapter(run)

  /**
   * Creates a new fully connected graph by passing a [[FlowGraph.Builder]] to the given create function.
   *
   * The created graph must have all ports connected, otherwise an [[IllegalArgumentException]] is thrown.
   */
  @throws(classOf[IllegalArgumentException])
  def closed(block: function.Procedure[FlowGraph.Builder[Unit]]): RunnableGraph[Unit] =
    scaladsl.FlowGraph.closed() { b ⇒ block.apply(b.asJava) }

  /**
   * Creates a new [[Graph]] by passing a [[FlowGraph.Builder]] to the given create function.
   *
   * Partial graphs are allowed to have unconnected ports.
   */
  def partial[S <: Shape](block: function.Function[FlowGraph.Builder[Unit], S]): Graph[S, Unit] =
    scaladsl.FlowGraph.partial() { b ⇒ block.apply(b.asJava) }

  /**
   * Creates a new fully connected graph by importing the given graph `g1` (using `builder.graph()`) and passing its resulting [[Shape]]
   * along with the[[FlowGraph.Builder]] to the given create function.
   *
   * The created graph must have all ports connected, otherwise an [[IllegalArgumentException]] is thrown.
   */
  @throws(classOf[IllegalArgumentException])
  def closed[S1 <: Shape, M](g1: Graph[S1, M],
      block: function.Procedure2[FlowGraph.Builder[M], S1]): RunnableGraph[M] =
    scaladsl.FlowGraph.closed(g1) { b ⇒ s => block.apply(b.asJava, s) }

  /**
   * Creates a new [[Graph]] by importing the given graph `g1` (using `builder.graph()`) and passing its resulting [[Shape]]
   * along with the[[FlowGraph.Builder]] to the given create function.
   *
   * Partial graphs are allowed to have unconnected ports.
   */
  def partial[S1 <: Shape, S <: Shape, M](g1: Graph[S1, M],
      block: function.Function2[FlowGraph.Builder[M], S1, S]): Graph[S, M] =
    scaladsl.FlowGraph.partial(g1) { b ⇒ s => block.apply(b.asJava, s) }

  /**
   * Creates a new fully connected graph by importing the given graphs (using `builder.graph()`) and passing their resulting [[Shape]]s
   * along with the[[FlowGraph.Builder]] to the given create function.
   *
   * The created graph must have all ports connected, otherwise an [[IllegalArgumentException]] is thrown.
   */
  @throws(classOf[IllegalArgumentException])
  def closed[S1 <: Shape, S2 <: Shape, M1, M2, M](g1: Graph[S1, M1], g2: Graph[S2, M2], combineMat: function.Function2[M1, M2, M],
      block: function.Procedure3[FlowGraph.Builder[M], S1, S2]): RunnableGraph[M] =
    scaladsl.FlowGraph.closed(g1, g2)(combineMat.apply _) { b => (s1, s2) => block.apply(b.asJava, s1, s2) }

  /**
   * Creates a new [[Graph]] by importing the given graphs (using `builder.graph()`) and passing their resulting [[Shape]]s
   * along with the[[FlowGraph.Builder]] to the given create function.
   *
   * Partial graphs are allowed to have unconnected ports.
   */
  def partial[S1 <: Shape, S2 <: Shape, S <: Shape, M1, M2, M](g1: Graph[S1, M1], g2: Graph[S2, M2], combineMat: function.Function2[M1, M2, M],
      block: function.Function3[FlowGraph.Builder[M], S1, S2, S]): Graph[S, M] =
    scaladsl.FlowGraph.partial(g1, g2)(combineMat.apply _) { b => (s1, s2) => block.apply(b.asJava, s1, s2) }

  [3..21#/**
   * Creates a new fully connected graph by importing the given graphs (using `builder.graph()`) and passing their resulting [[Shape]]s
   * along with the[[FlowGraph.Builder]] to the given create function.
   *
   * The created graph must have all ports connected, otherwise an [[IllegalArgumentException]] is thrown.
   */
  @throws(classOf[IllegalArgumentException])
  def closed1[[#S1 <: Shape#], [#M1#], M]([#g1: Graph[S1, M1]#], combineMat: function.Function1[[#M1#], M],
      block: function.Procedure2[FlowGraph.Builder[M], [#S1#]]): RunnableGraph[M] =
    scaladsl.FlowGraph.closed([#g1#])(combineMat.apply _) { b => ([#s1#]) => block.apply(b.asJava, [#s1#]) }

  /**
   * Creates a new [[Graph]] by importing the given graphs (using `builder.graph()`) and passing their resulting [[Shape]]s
   * along with the[[FlowGraph.Builder]] to the given create function.
   *
   * Partial graphs are allowed to have unconnected ports.
   */
  def partial1[[#S1 <: Shape#], S <: Shape, [#M1#], M]([#g1: Graph[S1, M1]#], combineMat: function.Function1[[#M1#], M],
      block: function.Function2[FlowGraph.Builder[M], [#S1#], S]): Graph[S, M] =
    scaladsl.FlowGraph.partial([#g1#])(combineMat.apply _) { b => ([#s1#]) => block.apply(b.asJava, [#s1#]) }#
  
  ]

}

/**
 * Copyright (C) 2015 Typesafe Inc. <http://www.typesafe.com>
 */
package akka.stream.javadsl

import akka.stream.scaladsl
import akka.stream.{ Inlet, Shape, Graph }
import akka.stream.scaladsl.JavaConverters._

trait GraphCreate {

  import language.implicitConversions
  private implicit def r[M](run: scaladsl.RunnableFlow[M]): RunnableFlow[M] = new RunnableFlowAdapter(run)

  def closed(block: japi.Procedure[FlowGraph.Builder]): RunnableFlow[Unit] =
    scaladsl.FlowGraph.closed() { b ⇒ block.apply(b.asJava) }

  def partial[S <: Shape](block: japi.Function[FlowGraph.Builder, S]): Graph[S, Unit] =
    scaladsl.FlowGraph.partial() { b ⇒ block.apply(b.asJava) }

  def closed[S1 <: Shape, M](g1: Graph[S1, M], block: japi.Procedure2[FlowGraph.Builder, S1]): RunnableFlow[M] =
    scaladsl.FlowGraph.closed(g1) { b ⇒ s => block.apply(b.asJava, s) }

  def partial[S1 <: Shape, S <: Shape, M](g1: Graph[S1, M], block: japi.Function2[FlowGraph.Builder, S1, S]): Graph[S, M] =
    scaladsl.FlowGraph.partial(g1) { b ⇒ s => block.apply(b.asJava, s) }

  [2..21#def closed[[#S1 <: Shape#], [#M1#], M]([#g1: Graph[S1, M1]#], combineMat: japi.Function1[[#M1#], M],
      block: japi.Procedure2[FlowGraph.Builder, [#S1#]]): RunnableFlow[M] =
    scaladsl.FlowGraph.closed([#g1#])(combineMat.apply _) { b => ([#s1#]) => block.apply(b.asJava, [#s1#]) }
    
  def partial[[#S1 <: Shape#], S <: Shape, [#M1#], M]([#g1: Graph[S1, M1]#], combineMat: japi.Function1[[#M1#], M],
      block: japi.Function2[FlowGraph.Builder, [#S1#], S]): Graph[S, M] =
    scaladsl.FlowGraph.partial([#g1#])(combineMat.apply _) { b => ([#s1#]) => block.apply(b.asJava, [#s1#]) }#
  
  ]

}

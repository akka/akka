/**
 * Copyright (C) 2015 Typesafe Inc. <http://www.typesafe.com>
 */
package akka.stream.javadsl

import akka.stream.scaladsl
import akka.stream.{ Outlet, Shape, Graph }

trait SourceCreate {

  /**
   * Creates a `Source` by using a `FlowGraph.Builder[Unit]` on a block that expects
   * a [[FlowGraph.Builder]] and returns an [[Outlet]].
   */
  def create[T](block: akka.japi.function.Function[FlowGraph.Builder[Unit], Outlet[T]]): Source[T, Unit] =
    new Source(scaladsl.Source() { b ⇒ block.apply(b.asJava) })

  /**
   * Creates a `Source` by using a `FlowGraph.Builder[M]` on a block that expects
   * a [[FlowGraph.Builder]] and 1 graph and then returns an [[Outlet]].
   * The graph will be imported (using `Builder.graph()`) and the resulting shape
   * will be passed into the create block.
   */
  def create[T, S <: Shape, M](g1: Graph[S, M],
      block: akka.japi.function.Function2[FlowGraph.Builder[M], S, Outlet[T]]): Source[T, M] =
    new Source(scaladsl.Source(g1) { b ⇒ s => block.apply(b.asJava, s) })

  /**
   * Creates a `Source` by using a `FlowGraph.Builder[M]` on a block that expects
   * a [[FlowGraph.Builder]] and 2 graphs and then returns an [[Outlet]].
   * The graphs will be imported (using `Builder.graph()`) and the resulting shapes
   * will be passed into the create block.
   */
  def create[T, S1 <: Shape, S2 <: Shape, M1, M2, M](g1: Graph[S1, M1], g2: Graph[S2, M2], combineMat: akka.japi.function.Function2[M1, M2, M],
      block: japi.Function3[FlowGraph.Builder[M], S1, S2, Outlet[T]]): Source[T, M] =
    new Source(scaladsl.Source(g1, g2)(combineMat.apply _) { b => (s1, s2) => block.apply(b.asJava, s1, s2) })

  [3..21#/**
   * Creates a `Source` by using a `FlowGraph.Builder[M]` on a block that expects
   * a [[FlowGraph.Builder]] and 1 graphs and then returns an [[Outlet]].
   * The graphs will be imported (using `Builder.graph()`) and the resulting shapes
   * will be passed into the create block.
   */
  def create1[T, [#S1 <: Shape#], [#M1#], M]([#g1: Graph[S1, M1]#], combineMat: japi.Function1[[#M1#], M],
      block: japi.Function2[FlowGraph.Builder[M], [#S1#], Outlet[T]]): Source[T, M] =
    new Source(scaladsl.Source([#g1#])(combineMat.apply _) { b => ([#s1#]) => block.apply(b.asJava, [#s1#]) })#
  
  ]

}

/**
 * Copyright (C) 2014-2015 Typesafe Inc. <http://www.typesafe.com>
 */
package akka.stream.impl

import scala.collection.immutable
import akka.actor.Props
import akka.stream.{ ActorFlowMaterializerSettings, Shape, Inlet, Outlet }
import akka.stream.impl.GenJunctions._

[2..20#/** INTERNAL API */
private[akka] final class Zip1With(_settings: ActorFlowMaterializerSettings, f: Function1[[#Any#], Any])
  extends FanIn(_settings, inputCount = 1) {

  inputBunch.markAllInputs()

  initialPhase(inputCount, TransferPhase(inputBunch.AllOfMarkedInputs && primaryOutputs.NeedsDemand) { () â‡’
    val elem##0 = inputBunch.dequeue(##0)
    [2..#val elem0 = inputBunch.dequeue(0)#
    ]

    primaryOutputs.enqueueOutputElement(f([#elem0#]))
  })
}#
]

/**
 * Copyright (C) 2014 Typesafe Inc. <http://www.typesafe.com>
 */
package akka.stream.impl

import akka.actor.Props
import akka.stream.ActorFlowMaterializerSettings

/**
 * INTERNAL API
 */
private[akka] object ZipWith {

  /** @param f MUST be a FunctionN type. */
  def props(settings: ActorFlowMaterializerSettings, f: Any): Props = f match {
    [2..#case f1: Function1[[#Any#], Any] => Props(new Zip1With(settings, f1))#
    ]
  }

  [2..#def props(settings: ActorFlowMaterializerSettings, f: Function1[[#Any#], Any]): Props =
    Props(new Zip1With(settings, f))#
  ]
}

[2..#/** INTERNAL API */
private[akka] final class Zip1With(_settings: ActorFlowMaterializerSettings, f: Function1[[#Any#], Any]) extends FanIn(_settings, inputPorts = 1) {
  inputBunch.markAllInputs()

  nextPhase(TransferPhase(inputBunch.AllOfMarkedInputs && primaryOutputs.NeedsDemand) { () â‡’
    val elem##0 = inputBunch.dequeue(##0)
    [2..#val elem0 = inputBunch.dequeue(0)#
    ]

    primaryOutputs.enqueueOutputElement(f([#elem0#]))
  })
}#
]
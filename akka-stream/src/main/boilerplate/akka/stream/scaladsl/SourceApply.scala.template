/**
 * Copyright (C) 2014-2015 Typesafe Inc. <http://www.typesafe.com>
 */
package akka.stream.scaladsl

import akka.stream.{ Outlet, Shape, Graph }

trait SourceApply {

  /**
   * Creates a `Source` by using a `FlowGraph.Builder[Unit]` on a block that expects
   * a [[FlowGraph.Builder]] and returns an [[Outlet]].
   */
  def apply[Out]()(buildBlock: FlowGraph.Builder[Unit] => Outlet[Out]): Source[Out, Unit] = {
    val builder = new FlowGraph.Builder
    val port = buildBlock(builder)
    builder.buildSource(port)
  }

  /**
   * Creates a `Source` by using a `FlowGraph.Builder[M]` on a block that expects
   * a [[FlowGraph.Builder]] and 1 graph and then returns an [[Outlet]].
   * The graph will be imported (using `Builder.graph()`) and the resulting shape
   * will be passed into the create block.
   */
  def apply[Out, Mat](g1: Graph[Shape, Mat])(buildBlock: FlowGraph.Builder[Mat] => (g1.Shape) => Outlet[Out]): Source[Out, Mat] = {
    val builder = new FlowGraph.Builder
    val p = builder.add(g1)
    val port = buildBlock(builder)(p)
    builder.buildSource(port)
  }

  [2..#/**
   * Creates a `Source` by using a `FlowGraph.Builder[M]` on a block that expects
   * a [[FlowGraph.Builder]] and 2 graphs and then returns an [[Outlet]].
   * The graphs will be imported (using `Builder.graph()`) and the resulting shapes
   * will be passed into the create block.
   */
  def apply[Out, [#M1#], Mat]([#g1: Graph[Shape, M1]#])(combineMat: ([#M1#]) ⇒ Mat)(
    buildBlock: FlowGraph.Builder[Mat] ⇒ ([#g1.Shape#]) ⇒ Outlet[Out]): Source[Out, Mat] = {
    val builder = new FlowGraph.Builder
    val curried = combineMat.curried
    val p##1 = builder.add(g##1, (m##1: M##1) ⇒ curried(m##1))
    [2..#val p1 = builder.add(g1, (f: M1 ⇒ Any, m1: M1) ⇒ f(m1))#
    ]
    val port = buildBlock(builder)([#p1#])
    builder.buildSource(port)
  }#
  
  ]

}

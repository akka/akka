/**
 * Copyright (C) 2014-2015 Typesafe Inc. <http://www.typesafe.com>
 */
package akka.stream.scaladsl

import akka.stream.impl.StreamLayout
import akka.stream.impl.StreamLayout.Module
import akka.stream.{ Graph, Attributes, Shape }

trait GraphApply {

  /**
   * Creates a new fully connected graph by passing a [[FlowGraph.Builder]] to the given create function.
   *
   * The created graph must have all ports connected, otherwise an [[IllegalArgumentException]] is thrown.
   */
  def closed()(buildBlock: (FlowGraph.Builder[Unit]) ⇒ Unit): RunnableGraph[Unit] = {
    val builder = new FlowGraph.Builder
    buildBlock(builder)
    builder.buildRunnable()
  }

  /**
   * Creates a new [[Graph]] by passing a [[FlowGraph.Builder]] to the given create function.
   *
   * Partial graphs are allowed to have unconnected ports.
   */
  def partial[S <: Shape]()(buildBlock: FlowGraph.Builder[Unit] ⇒ S): Graph[S, Unit] = {
    val builder = new FlowGraph.Builder
    val s = buildBlock(builder)
    val mod = builder.module.nest().replaceShape(s)

    new GraphApply.GraphImpl(s, mod)
  }

  /**
   * Creates a new fully connected graph by importing the given graph `g1` (using `builder.graph()`) and passing its resulting [[Shape]]
   * along with the[[FlowGraph.Builder]] to the given create function.
   *
   * The created graph must have all ports connected, otherwise an [[IllegalArgumentException]] is thrown.
   */
  def closed[Mat](g1: Graph[Shape, Mat])(buildBlock: FlowGraph.Builder[Mat] ⇒ (g1.Shape) ⇒ Unit): RunnableGraph[Mat] = {
    val builder = new FlowGraph.Builder
    val p1 = builder.add(g1)
    buildBlock(builder)(p1)
    builder.buildRunnable()
  }

  /**
   * Creates a new [[Graph]] by importing the given graph `g1` (using `builder.graph()`) and passing its resulting [[Shape]]
   * along with the[[FlowGraph.Builder]] to the given create function.
   *
   * Partial graphs are allowed to have unconnected ports.
   */
  def partial[S <: Shape, Mat](g1: Graph[Shape, Mat])(buildBlock: FlowGraph.Builder[Mat] ⇒ (g1.Shape) ⇒ S): Graph[S, Mat] = {
    val builder = new FlowGraph.Builder
    val s1 = builder.add(g1)
    val s = buildBlock(builder)(s1)
    val mod = builder.module.nest().replaceShape(s)

    new GraphApply.GraphImpl(s, mod)
  }


  [2..#/**
   * Creates a new fully connected graph by importing the given graphs (using `builder.graph()`) and passing their resulting [[Shape]]s
   * along with the[[FlowGraph.Builder]] to the given create function.
   *
   * The created graph must have all ports connected, otherwise an [[IllegalArgumentException]] is thrown.
   */
  def closed[Mat, [#M1#]]([#g1: Graph[Shape, M1]#])(combineMat: ([#M1#]) ⇒ Mat)(buildBlock: FlowGraph.Builder[Mat] ⇒ ([#g1.Shape#]) ⇒ Unit): RunnableGraph[Mat] = {
    val builder = new FlowGraph.Builder
    val curried = combineMat.curried
    val s##1 = builder.add(g##1, (m##1: M##1) ⇒ curried(m##1))
    [2..#val s1 = builder.add(g1, (f: M1 ⇒ Any, m1: M1) ⇒ f(m1))#
    ]
    buildBlock(builder)([#s1#])
    builder.buildRunnable()
  }

  /**
   * Creates a new [[Graph]] by importing the given graphs (using `builder.graph()`) and passing their resulting [[Shape]]s
   * along with the[[FlowGraph.Builder]] to the given create function.
   *
   * Partial graphs are allowed to have unconnected ports.
   */
  def partial[S <: Shape, Mat, [#M1#]]([#g1: Graph[Shape, M1]#])(combineMat: ([#M1#]) ⇒ Mat)(buildBlock: FlowGraph.Builder[Mat] ⇒ ([#g1.Shape#]) ⇒ S): Graph[S, Mat] = {
    val builder = new FlowGraph.Builder
    val curried = combineMat.curried
    val s##1 = builder.add(g##1, (m##1: M##1) ⇒ curried(m##1))
    [2..#val s1 = builder.add(g1, (f: M1 ⇒ Any, m1: M1) ⇒ f(m1))#
    ]
    val s = buildBlock(builder)([#s1#])
    val mod = builder.module.nest().replaceShape(s)

    new GraphApply.GraphImpl(s, mod)
  }#

  ]


}

/**
 * INTERNAL API
 */
private[stream] object GraphApply {
  class GraphImpl[S <: Shape, Mat](override val shape: S, private[stream] override val module: StreamLayout.Module)
    extends Graph[S, Mat] {

    override def withAttributes(attr: Attributes): Graph[S, Mat] =
      new GraphImpl(shape, module.withAttributes(attr).nest())

    override def named(name: String): Graph[S, Mat] = withAttributes(Attributes.name(name))
  }

}

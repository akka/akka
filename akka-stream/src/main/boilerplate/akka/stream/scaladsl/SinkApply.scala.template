/**
 * Copyright (C) 2014-2015 Typesafe Inc. <http://www.typesafe.com>
 */
package akka.stream.scaladsl

import akka.stream.{ Inlet, Graph, Shape }

trait SinkApply {

  /**
   * Creates a `Sink` by using a `FlowGraph.Builder[Unit]` on a block that expects
   * a [[FlowGraph.Builder]] and returns an [[Inlet]].
   */
  def apply[In]()(buildBlock: FlowGraph.Builder[Unit] => Inlet[In]): Sink[In, Unit] = {
    val builder = new FlowGraph.Builder
    val inlet = buildBlock(builder)
    builder.buildSink(inlet)
  }

  /**
   * Creates a `Sink` by importing the given graph (using `builder.graph()`) and calling the provided create function
   * with the `FlowGraph.Builder[M]` and the [[Shape]] resulting from importing the graph.
   * The create function is expected to return the created Sink's [[Inlet]].
   */
  def apply[In, Mat](g1: Graph[Shape, Mat])(buildBlock: FlowGraph.Builder[Mat] => (g1.Shape) => Inlet[In]): Sink[In, Mat] = {
    val builder = new FlowGraph.Builder
    val s = builder.add(g1)
    val inlet = buildBlock(builder)(s)
    builder.buildSink(inlet)
  }

  [2..#/**
   * Creates a `Sink` by importing the given graphs (using `builder.graph()`) and calling the provided create function
   * with the `FlowGraph.Builder[M]` and the [[Shape]]s resulting from importing the graphs.
   * The create function is expected to return the created Sink's [[Inlet]].
   */
  def apply[In, [#M1#], Mat]([#g1: Graph[Shape, M1]#])(combineMat: ([#M1#]) ⇒ Mat)(
    buildBlock: FlowGraph.Builder[Mat] ⇒ ([#g1.Shape#]) ⇒ Inlet[In]): Sink[In, Mat] = {
    val builder = new FlowGraph.Builder
    val curried = combineMat.curried
    val s##1 = builder.add(g##1, (m##1: M##1) ⇒ curried(m##1))
    [2..#val s1 = builder.add(g1, (f: M1 ⇒ Any, m1: M1) ⇒ f(m1))#
    ]
    val inlet = buildBlock(builder)([#s1#])
    builder.buildSink(inlet)
  }#
  
  ]

}

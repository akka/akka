/**
 * Copyright (C) 2014-2015 Typesafe Inc. <http://www.typesafe.com>
 */
package akka.stream.scaladsl

import akka.stream.{ Shape, Inlet, Outlet, Graph, BidiShape }

trait BidiFlowApply {

  /**
   * Creates a BidiFlow by applying a [[FlowGraph.Builder]] to the given create block.
   */
  def apply[I1, O1, I2, O2]()(block: FlowGraph.Builder[Unit] ⇒ BidiShape[I1, O1, I2, O2]): BidiFlow[I1, O1, I2, O2, Unit] = {
    val builder = new FlowGraph.Builder
    val shape = block(builder)
    builder.buildBidiFlow(shape)
  }

  /**
   * Creates a BidiFlow by applying a [[FlowGraph.Builder]] to the given create block.
   * The given graph will be imported (using `builder.graph()`) and the resulting [[Shape]] will be passed to the create block along with the builder.
   */
  def apply[I1, O1, I2, O2, Mat](g1: Graph[Shape, Mat])(buildBlock: FlowGraph.Builder[Mat] => (g1.Shape) ⇒ BidiShape[I1, O1, I2, O2]): BidiFlow[I1, O1, I2, O2, Mat] = {
    val builder = new FlowGraph.Builder
    val p = builder.add(g1, Keep.right)
    val shape = buildBlock(builder)(p)
    builder.buildBidiFlow(shape)
  }
  
  [2..#/**
   * Creates a BidiFlow by applying a [[FlowGraph.Builder]] to the given create block.
   * The given graph will be imported (using `builder.graph()`) and the resulting [[Shape]] will be passed to the create block along with the builder.
   */
  def apply[I##1, O##1, I##2, O##2, [#M1#], Mat]([#g1: Graph[Shape, M1]#])(combineMat: ([#M1#]) => Mat)(
    buildBlock: FlowGraph.Builder[Mat] => ([#g1.Shape#]) ⇒ BidiShape[I##1, O##1, I##2, O##2]): BidiFlow[I##1, O##1, I##2, O##2, Mat] = {
    val builder = new FlowGraph.Builder
    val curried = combineMat.curried
    val p##1 = builder.add(g##1, (_: Any, m##1: M##1) ⇒ curried(m##1))
    [2..#val p1 = builder.add(g1, (f: M1 ⇒ Any, m1: M1) ⇒ f(m1))#
    ]
    val shape = buildBlock(builder)([#p1#])
    builder.buildBidiFlow(shape)
  }#
  
  ]

}

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StreamRefContainers.proto

package akka.stream.remote;

public final class StreamRefContainers {
  private StreamRefContainers() {}
  public static void registerAllExtensions(
      akka.protobuf.ExtensionRegistry registry) {
  }
  public interface SinkRefOrBuilder
      extends akka.protobuf.MessageOrBuilder {

    // required .ActorRef targetRef = 1;
    /**
     * <code>required .ActorRef targetRef = 1;</code>
     */
    boolean hasTargetRef();
    /**
     * <code>required .ActorRef targetRef = 1;</code>
     */
    akka.stream.remote.StreamRefContainers.ActorRef getTargetRef();
    /**
     * <code>required .ActorRef targetRef = 1;</code>
     */
    akka.stream.remote.StreamRefContainers.ActorRefOrBuilder getTargetRefOrBuilder();

    // optional int64 initialDemand = 2;
    /**
     * <code>optional int64 initialDemand = 2;</code>
     */
    boolean hasInitialDemand();
    /**
     * <code>optional int64 initialDemand = 2;</code>
     */
    long getInitialDemand();
  }
  /**
   * Protobuf type {@code SinkRef}
   */
  public static final class SinkRef extends
      akka.protobuf.GeneratedMessage
      implements SinkRefOrBuilder {
    // Use SinkRef.newBuilder() to construct.
    private SinkRef(akka.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SinkRef(boolean noInit) { this.unknownFields = akka.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SinkRef defaultInstance;
    public static SinkRef getDefaultInstance() {
      return defaultInstance;
    }

    public SinkRef getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final akka.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final akka.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SinkRef(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      akka.protobuf.UnknownFieldSet.Builder unknownFields =
          akka.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              akka.stream.remote.StreamRefContainers.ActorRef.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = targetRef_.toBuilder();
              }
              targetRef_ = input.readMessage(akka.stream.remote.StreamRefContainers.ActorRef.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(targetRef_);
                targetRef_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              initialDemand_ = input.readInt64();
              break;
            }
          }
        }
      } catch (akka.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new akka.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final akka.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return akka.stream.remote.StreamRefContainers.internal_static_SinkRef_descriptor;
    }

    protected akka.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return akka.stream.remote.StreamRefContainers.internal_static_SinkRef_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              akka.stream.remote.StreamRefContainers.SinkRef.class, akka.stream.remote.StreamRefContainers.SinkRef.Builder.class);
    }

    public static akka.protobuf.Parser<SinkRef> PARSER =
        new akka.protobuf.AbstractParser<SinkRef>() {
      public SinkRef parsePartialFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws akka.protobuf.InvalidProtocolBufferException {
        return new SinkRef(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public akka.protobuf.Parser<SinkRef> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .ActorRef targetRef = 1;
    public static final int TARGETREF_FIELD_NUMBER = 1;
    private akka.stream.remote.StreamRefContainers.ActorRef targetRef_;
    /**
     * <code>required .ActorRef targetRef = 1;</code>
     */
    public boolean hasTargetRef() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .ActorRef targetRef = 1;</code>
     */
    public akka.stream.remote.StreamRefContainers.ActorRef getTargetRef() {
      return targetRef_;
    }
    /**
     * <code>required .ActorRef targetRef = 1;</code>
     */
    public akka.stream.remote.StreamRefContainers.ActorRefOrBuilder getTargetRefOrBuilder() {
      return targetRef_;
    }

    // optional int64 initialDemand = 2;
    public static final int INITIALDEMAND_FIELD_NUMBER = 2;
    private long initialDemand_;
    /**
     * <code>optional int64 initialDemand = 2;</code>
     */
    public boolean hasInitialDemand() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 initialDemand = 2;</code>
     */
    public long getInitialDemand() {
      return initialDemand_;
    }

    private void initFields() {
      targetRef_ = akka.stream.remote.StreamRefContainers.ActorRef.getDefaultInstance();
      initialDemand_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasTargetRef()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTargetRef().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(akka.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, targetRef_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, initialDemand_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += akka.protobuf.CodedOutputStream
          .computeMessageSize(1, targetRef_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += akka.protobuf.CodedOutputStream
          .computeInt64Size(2, initialDemand_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static akka.stream.remote.StreamRefContainers.SinkRef parseFrom(
        akka.protobuf.ByteString data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.SinkRef parseFrom(
        akka.protobuf.ByteString data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.SinkRef parseFrom(byte[] data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.SinkRef parseFrom(
        byte[] data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.SinkRef parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.SinkRef parseFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.SinkRef parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.SinkRef parseDelimitedFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.SinkRef parseFrom(
        akka.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.SinkRef parseFrom(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(akka.stream.remote.StreamRefContainers.SinkRef prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        akka.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SinkRef}
     */
    public static final class Builder extends
        akka.protobuf.GeneratedMessage.Builder<Builder>
       implements akka.stream.remote.StreamRefContainers.SinkRefOrBuilder {
      public static final akka.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return akka.stream.remote.StreamRefContainers.internal_static_SinkRef_descriptor;
      }

      protected akka.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return akka.stream.remote.StreamRefContainers.internal_static_SinkRef_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                akka.stream.remote.StreamRefContainers.SinkRef.class, akka.stream.remote.StreamRefContainers.SinkRef.Builder.class);
      }

      // Construct using akka.stream.remote.StreamRefContainers.SinkRef.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          akka.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (akka.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTargetRefFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (targetRefBuilder_ == null) {
          targetRef_ = akka.stream.remote.StreamRefContainers.ActorRef.getDefaultInstance();
        } else {
          targetRefBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        initialDemand_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public akka.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return akka.stream.remote.StreamRefContainers.internal_static_SinkRef_descriptor;
      }

      public akka.stream.remote.StreamRefContainers.SinkRef getDefaultInstanceForType() {
        return akka.stream.remote.StreamRefContainers.SinkRef.getDefaultInstance();
      }

      public akka.stream.remote.StreamRefContainers.SinkRef build() {
        akka.stream.remote.StreamRefContainers.SinkRef result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public akka.stream.remote.StreamRefContainers.SinkRef buildPartial() {
        akka.stream.remote.StreamRefContainers.SinkRef result = new akka.stream.remote.StreamRefContainers.SinkRef(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (targetRefBuilder_ == null) {
          result.targetRef_ = targetRef_;
        } else {
          result.targetRef_ = targetRefBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.initialDemand_ = initialDemand_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(akka.protobuf.Message other) {
        if (other instanceof akka.stream.remote.StreamRefContainers.SinkRef) {
          return mergeFrom((akka.stream.remote.StreamRefContainers.SinkRef)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(akka.stream.remote.StreamRefContainers.SinkRef other) {
        if (other == akka.stream.remote.StreamRefContainers.SinkRef.getDefaultInstance()) return this;
        if (other.hasTargetRef()) {
          mergeTargetRef(other.getTargetRef());
        }
        if (other.hasInitialDemand()) {
          setInitialDemand(other.getInitialDemand());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTargetRef()) {
          
          return false;
        }
        if (!getTargetRef().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        akka.stream.remote.StreamRefContainers.SinkRef parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (akka.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (akka.stream.remote.StreamRefContainers.SinkRef) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .ActorRef targetRef = 1;
      private akka.stream.remote.StreamRefContainers.ActorRef targetRef_ = akka.stream.remote.StreamRefContainers.ActorRef.getDefaultInstance();
      private akka.protobuf.SingleFieldBuilder<
          akka.stream.remote.StreamRefContainers.ActorRef, akka.stream.remote.StreamRefContainers.ActorRef.Builder, akka.stream.remote.StreamRefContainers.ActorRefOrBuilder> targetRefBuilder_;
      /**
       * <code>required .ActorRef targetRef = 1;</code>
       */
      public boolean hasTargetRef() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .ActorRef targetRef = 1;</code>
       */
      public akka.stream.remote.StreamRefContainers.ActorRef getTargetRef() {
        if (targetRefBuilder_ == null) {
          return targetRef_;
        } else {
          return targetRefBuilder_.getMessage();
        }
      }
      /**
       * <code>required .ActorRef targetRef = 1;</code>
       */
      public Builder setTargetRef(akka.stream.remote.StreamRefContainers.ActorRef value) {
        if (targetRefBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          targetRef_ = value;
          onChanged();
        } else {
          targetRefBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ActorRef targetRef = 1;</code>
       */
      public Builder setTargetRef(
          akka.stream.remote.StreamRefContainers.ActorRef.Builder builderForValue) {
        if (targetRefBuilder_ == null) {
          targetRef_ = builderForValue.build();
          onChanged();
        } else {
          targetRefBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ActorRef targetRef = 1;</code>
       */
      public Builder mergeTargetRef(akka.stream.remote.StreamRefContainers.ActorRef value) {
        if (targetRefBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              targetRef_ != akka.stream.remote.StreamRefContainers.ActorRef.getDefaultInstance()) {
            targetRef_ =
              akka.stream.remote.StreamRefContainers.ActorRef.newBuilder(targetRef_).mergeFrom(value).buildPartial();
          } else {
            targetRef_ = value;
          }
          onChanged();
        } else {
          targetRefBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ActorRef targetRef = 1;</code>
       */
      public Builder clearTargetRef() {
        if (targetRefBuilder_ == null) {
          targetRef_ = akka.stream.remote.StreamRefContainers.ActorRef.getDefaultInstance();
          onChanged();
        } else {
          targetRefBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .ActorRef targetRef = 1;</code>
       */
      public akka.stream.remote.StreamRefContainers.ActorRef.Builder getTargetRefBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTargetRefFieldBuilder().getBuilder();
      }
      /**
       * <code>required .ActorRef targetRef = 1;</code>
       */
      public akka.stream.remote.StreamRefContainers.ActorRefOrBuilder getTargetRefOrBuilder() {
        if (targetRefBuilder_ != null) {
          return targetRefBuilder_.getMessageOrBuilder();
        } else {
          return targetRef_;
        }
      }
      /**
       * <code>required .ActorRef targetRef = 1;</code>
       */
      private akka.protobuf.SingleFieldBuilder<
          akka.stream.remote.StreamRefContainers.ActorRef, akka.stream.remote.StreamRefContainers.ActorRef.Builder, akka.stream.remote.StreamRefContainers.ActorRefOrBuilder> 
          getTargetRefFieldBuilder() {
        if (targetRefBuilder_ == null) {
          targetRefBuilder_ = new akka.protobuf.SingleFieldBuilder<
              akka.stream.remote.StreamRefContainers.ActorRef, akka.stream.remote.StreamRefContainers.ActorRef.Builder, akka.stream.remote.StreamRefContainers.ActorRefOrBuilder>(
                  targetRef_,
                  getParentForChildren(),
                  isClean());
          targetRef_ = null;
        }
        return targetRefBuilder_;
      }

      // optional int64 initialDemand = 2;
      private long initialDemand_ ;
      /**
       * <code>optional int64 initialDemand = 2;</code>
       */
      public boolean hasInitialDemand() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 initialDemand = 2;</code>
       */
      public long getInitialDemand() {
        return initialDemand_;
      }
      /**
       * <code>optional int64 initialDemand = 2;</code>
       */
      public Builder setInitialDemand(long value) {
        bitField0_ |= 0x00000002;
        initialDemand_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 initialDemand = 2;</code>
       */
      public Builder clearInitialDemand() {
        bitField0_ = (bitField0_ & ~0x00000002);
        initialDemand_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SinkRef)
    }

    static {
      defaultInstance = new SinkRef(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:SinkRef)
  }

  public interface SourceRefOrBuilder
      extends akka.protobuf.MessageOrBuilder {

    // required .ActorRef originRef = 1;
    /**
     * <code>required .ActorRef originRef = 1;</code>
     *
     * <pre>
     * FIXME: it's basically SinkRef since we just ommit the optional initial demand...
     * FIXME: could it be that all those passable refs should be expressed internally as a StreamRef?
     * </pre>
     */
    boolean hasOriginRef();
    /**
     * <code>required .ActorRef originRef = 1;</code>
     *
     * <pre>
     * FIXME: it's basically SinkRef since we just ommit the optional initial demand...
     * FIXME: could it be that all those passable refs should be expressed internally as a StreamRef?
     * </pre>
     */
    akka.stream.remote.StreamRefContainers.ActorRef getOriginRef();
    /**
     * <code>required .ActorRef originRef = 1;</code>
     *
     * <pre>
     * FIXME: it's basically SinkRef since we just ommit the optional initial demand...
     * FIXME: could it be that all those passable refs should be expressed internally as a StreamRef?
     * </pre>
     */
    akka.stream.remote.StreamRefContainers.ActorRefOrBuilder getOriginRefOrBuilder();
  }
  /**
   * Protobuf type {@code SourceRef}
   */
  public static final class SourceRef extends
      akka.protobuf.GeneratedMessage
      implements SourceRefOrBuilder {
    // Use SourceRef.newBuilder() to construct.
    private SourceRef(akka.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SourceRef(boolean noInit) { this.unknownFields = akka.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SourceRef defaultInstance;
    public static SourceRef getDefaultInstance() {
      return defaultInstance;
    }

    public SourceRef getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final akka.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final akka.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SourceRef(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      akka.protobuf.UnknownFieldSet.Builder unknownFields =
          akka.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              akka.stream.remote.StreamRefContainers.ActorRef.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = originRef_.toBuilder();
              }
              originRef_ = input.readMessage(akka.stream.remote.StreamRefContainers.ActorRef.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(originRef_);
                originRef_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (akka.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new akka.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final akka.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return akka.stream.remote.StreamRefContainers.internal_static_SourceRef_descriptor;
    }

    protected akka.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return akka.stream.remote.StreamRefContainers.internal_static_SourceRef_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              akka.stream.remote.StreamRefContainers.SourceRef.class, akka.stream.remote.StreamRefContainers.SourceRef.Builder.class);
    }

    public static akka.protobuf.Parser<SourceRef> PARSER =
        new akka.protobuf.AbstractParser<SourceRef>() {
      public SourceRef parsePartialFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws akka.protobuf.InvalidProtocolBufferException {
        return new SourceRef(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public akka.protobuf.Parser<SourceRef> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .ActorRef originRef = 1;
    public static final int ORIGINREF_FIELD_NUMBER = 1;
    private akka.stream.remote.StreamRefContainers.ActorRef originRef_;
    /**
     * <code>required .ActorRef originRef = 1;</code>
     *
     * <pre>
     * FIXME: it's basically SinkRef since we just ommit the optional initial demand...
     * FIXME: could it be that all those passable refs should be expressed internally as a StreamRef?
     * </pre>
     */
    public boolean hasOriginRef() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .ActorRef originRef = 1;</code>
     *
     * <pre>
     * FIXME: it's basically SinkRef since we just ommit the optional initial demand...
     * FIXME: could it be that all those passable refs should be expressed internally as a StreamRef?
     * </pre>
     */
    public akka.stream.remote.StreamRefContainers.ActorRef getOriginRef() {
      return originRef_;
    }
    /**
     * <code>required .ActorRef originRef = 1;</code>
     *
     * <pre>
     * FIXME: it's basically SinkRef since we just ommit the optional initial demand...
     * FIXME: could it be that all those passable refs should be expressed internally as a StreamRef?
     * </pre>
     */
    public akka.stream.remote.StreamRefContainers.ActorRefOrBuilder getOriginRefOrBuilder() {
      return originRef_;
    }

    private void initFields() {
      originRef_ = akka.stream.remote.StreamRefContainers.ActorRef.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasOriginRef()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getOriginRef().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(akka.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, originRef_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += akka.protobuf.CodedOutputStream
          .computeMessageSize(1, originRef_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static akka.stream.remote.StreamRefContainers.SourceRef parseFrom(
        akka.protobuf.ByteString data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.SourceRef parseFrom(
        akka.protobuf.ByteString data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.SourceRef parseFrom(byte[] data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.SourceRef parseFrom(
        byte[] data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.SourceRef parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.SourceRef parseFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.SourceRef parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.SourceRef parseDelimitedFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.SourceRef parseFrom(
        akka.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.SourceRef parseFrom(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(akka.stream.remote.StreamRefContainers.SourceRef prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        akka.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SourceRef}
     */
    public static final class Builder extends
        akka.protobuf.GeneratedMessage.Builder<Builder>
       implements akka.stream.remote.StreamRefContainers.SourceRefOrBuilder {
      public static final akka.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return akka.stream.remote.StreamRefContainers.internal_static_SourceRef_descriptor;
      }

      protected akka.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return akka.stream.remote.StreamRefContainers.internal_static_SourceRef_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                akka.stream.remote.StreamRefContainers.SourceRef.class, akka.stream.remote.StreamRefContainers.SourceRef.Builder.class);
      }

      // Construct using akka.stream.remote.StreamRefContainers.SourceRef.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          akka.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (akka.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOriginRefFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (originRefBuilder_ == null) {
          originRef_ = akka.stream.remote.StreamRefContainers.ActorRef.getDefaultInstance();
        } else {
          originRefBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public akka.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return akka.stream.remote.StreamRefContainers.internal_static_SourceRef_descriptor;
      }

      public akka.stream.remote.StreamRefContainers.SourceRef getDefaultInstanceForType() {
        return akka.stream.remote.StreamRefContainers.SourceRef.getDefaultInstance();
      }

      public akka.stream.remote.StreamRefContainers.SourceRef build() {
        akka.stream.remote.StreamRefContainers.SourceRef result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public akka.stream.remote.StreamRefContainers.SourceRef buildPartial() {
        akka.stream.remote.StreamRefContainers.SourceRef result = new akka.stream.remote.StreamRefContainers.SourceRef(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (originRefBuilder_ == null) {
          result.originRef_ = originRef_;
        } else {
          result.originRef_ = originRefBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(akka.protobuf.Message other) {
        if (other instanceof akka.stream.remote.StreamRefContainers.SourceRef) {
          return mergeFrom((akka.stream.remote.StreamRefContainers.SourceRef)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(akka.stream.remote.StreamRefContainers.SourceRef other) {
        if (other == akka.stream.remote.StreamRefContainers.SourceRef.getDefaultInstance()) return this;
        if (other.hasOriginRef()) {
          mergeOriginRef(other.getOriginRef());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasOriginRef()) {
          
          return false;
        }
        if (!getOriginRef().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        akka.stream.remote.StreamRefContainers.SourceRef parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (akka.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (akka.stream.remote.StreamRefContainers.SourceRef) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .ActorRef originRef = 1;
      private akka.stream.remote.StreamRefContainers.ActorRef originRef_ = akka.stream.remote.StreamRefContainers.ActorRef.getDefaultInstance();
      private akka.protobuf.SingleFieldBuilder<
          akka.stream.remote.StreamRefContainers.ActorRef, akka.stream.remote.StreamRefContainers.ActorRef.Builder, akka.stream.remote.StreamRefContainers.ActorRefOrBuilder> originRefBuilder_;
      /**
       * <code>required .ActorRef originRef = 1;</code>
       *
       * <pre>
       * FIXME: it's basically SinkRef since we just ommit the optional initial demand...
       * FIXME: could it be that all those passable refs should be expressed internally as a StreamRef?
       * </pre>
       */
      public boolean hasOriginRef() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .ActorRef originRef = 1;</code>
       *
       * <pre>
       * FIXME: it's basically SinkRef since we just ommit the optional initial demand...
       * FIXME: could it be that all those passable refs should be expressed internally as a StreamRef?
       * </pre>
       */
      public akka.stream.remote.StreamRefContainers.ActorRef getOriginRef() {
        if (originRefBuilder_ == null) {
          return originRef_;
        } else {
          return originRefBuilder_.getMessage();
        }
      }
      /**
       * <code>required .ActorRef originRef = 1;</code>
       *
       * <pre>
       * FIXME: it's basically SinkRef since we just ommit the optional initial demand...
       * FIXME: could it be that all those passable refs should be expressed internally as a StreamRef?
       * </pre>
       */
      public Builder setOriginRef(akka.stream.remote.StreamRefContainers.ActorRef value) {
        if (originRefBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          originRef_ = value;
          onChanged();
        } else {
          originRefBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ActorRef originRef = 1;</code>
       *
       * <pre>
       * FIXME: it's basically SinkRef since we just ommit the optional initial demand...
       * FIXME: could it be that all those passable refs should be expressed internally as a StreamRef?
       * </pre>
       */
      public Builder setOriginRef(
          akka.stream.remote.StreamRefContainers.ActorRef.Builder builderForValue) {
        if (originRefBuilder_ == null) {
          originRef_ = builderForValue.build();
          onChanged();
        } else {
          originRefBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ActorRef originRef = 1;</code>
       *
       * <pre>
       * FIXME: it's basically SinkRef since we just ommit the optional initial demand...
       * FIXME: could it be that all those passable refs should be expressed internally as a StreamRef?
       * </pre>
       */
      public Builder mergeOriginRef(akka.stream.remote.StreamRefContainers.ActorRef value) {
        if (originRefBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              originRef_ != akka.stream.remote.StreamRefContainers.ActorRef.getDefaultInstance()) {
            originRef_ =
              akka.stream.remote.StreamRefContainers.ActorRef.newBuilder(originRef_).mergeFrom(value).buildPartial();
          } else {
            originRef_ = value;
          }
          onChanged();
        } else {
          originRefBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ActorRef originRef = 1;</code>
       *
       * <pre>
       * FIXME: it's basically SinkRef since we just ommit the optional initial demand...
       * FIXME: could it be that all those passable refs should be expressed internally as a StreamRef?
       * </pre>
       */
      public Builder clearOriginRef() {
        if (originRefBuilder_ == null) {
          originRef_ = akka.stream.remote.StreamRefContainers.ActorRef.getDefaultInstance();
          onChanged();
        } else {
          originRefBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .ActorRef originRef = 1;</code>
       *
       * <pre>
       * FIXME: it's basically SinkRef since we just ommit the optional initial demand...
       * FIXME: could it be that all those passable refs should be expressed internally as a StreamRef?
       * </pre>
       */
      public akka.stream.remote.StreamRefContainers.ActorRef.Builder getOriginRefBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getOriginRefFieldBuilder().getBuilder();
      }
      /**
       * <code>required .ActorRef originRef = 1;</code>
       *
       * <pre>
       * FIXME: it's basically SinkRef since we just ommit the optional initial demand...
       * FIXME: could it be that all those passable refs should be expressed internally as a StreamRef?
       * </pre>
       */
      public akka.stream.remote.StreamRefContainers.ActorRefOrBuilder getOriginRefOrBuilder() {
        if (originRefBuilder_ != null) {
          return originRefBuilder_.getMessageOrBuilder();
        } else {
          return originRef_;
        }
      }
      /**
       * <code>required .ActorRef originRef = 1;</code>
       *
       * <pre>
       * FIXME: it's basically SinkRef since we just ommit the optional initial demand...
       * FIXME: could it be that all those passable refs should be expressed internally as a StreamRef?
       * </pre>
       */
      private akka.protobuf.SingleFieldBuilder<
          akka.stream.remote.StreamRefContainers.ActorRef, akka.stream.remote.StreamRefContainers.ActorRef.Builder, akka.stream.remote.StreamRefContainers.ActorRefOrBuilder> 
          getOriginRefFieldBuilder() {
        if (originRefBuilder_ == null) {
          originRefBuilder_ = new akka.protobuf.SingleFieldBuilder<
              akka.stream.remote.StreamRefContainers.ActorRef, akka.stream.remote.StreamRefContainers.ActorRef.Builder, akka.stream.remote.StreamRefContainers.ActorRefOrBuilder>(
                  originRef_,
                  getParentForChildren(),
                  isClean());
          originRef_ = null;
        }
        return originRefBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:SourceRef)
    }

    static {
      defaultInstance = new SourceRef(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:SourceRef)
  }

  public interface ActorRefOrBuilder
      extends akka.protobuf.MessageOrBuilder {

    // required string path = 1;
    /**
     * <code>required string path = 1;</code>
     */
    boolean hasPath();
    /**
     * <code>required string path = 1;</code>
     */
    java.lang.String getPath();
    /**
     * <code>required string path = 1;</code>
     */
    akka.protobuf.ByteString
        getPathBytes();
  }
  /**
   * Protobuf type {@code ActorRef}
   */
  public static final class ActorRef extends
      akka.protobuf.GeneratedMessage
      implements ActorRefOrBuilder {
    // Use ActorRef.newBuilder() to construct.
    private ActorRef(akka.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ActorRef(boolean noInit) { this.unknownFields = akka.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ActorRef defaultInstance;
    public static ActorRef getDefaultInstance() {
      return defaultInstance;
    }

    public ActorRef getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final akka.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final akka.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ActorRef(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      akka.protobuf.UnknownFieldSet.Builder unknownFields =
          akka.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              path_ = input.readBytes();
              break;
            }
          }
        }
      } catch (akka.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new akka.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final akka.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return akka.stream.remote.StreamRefContainers.internal_static_ActorRef_descriptor;
    }

    protected akka.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return akka.stream.remote.StreamRefContainers.internal_static_ActorRef_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              akka.stream.remote.StreamRefContainers.ActorRef.class, akka.stream.remote.StreamRefContainers.ActorRef.Builder.class);
    }

    public static akka.protobuf.Parser<ActorRef> PARSER =
        new akka.protobuf.AbstractParser<ActorRef>() {
      public ActorRef parsePartialFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws akka.protobuf.InvalidProtocolBufferException {
        return new ActorRef(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public akka.protobuf.Parser<ActorRef> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string path = 1;
    public static final int PATH_FIELD_NUMBER = 1;
    private java.lang.Object path_;
    /**
     * <code>required string path = 1;</code>
     */
    public boolean hasPath() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string path = 1;</code>
     */
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        akka.protobuf.ByteString bs = 
            (akka.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          path_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string path = 1;</code>
     */
    public akka.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        akka.protobuf.ByteString b = 
            akka.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (akka.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      path_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPath()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(akka.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getPathBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += akka.protobuf.CodedOutputStream
          .computeBytesSize(1, getPathBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static akka.stream.remote.StreamRefContainers.ActorRef parseFrom(
        akka.protobuf.ByteString data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.ActorRef parseFrom(
        akka.protobuf.ByteString data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.ActorRef parseFrom(byte[] data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.ActorRef parseFrom(
        byte[] data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.ActorRef parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.ActorRef parseFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.ActorRef parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.ActorRef parseDelimitedFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.ActorRef parseFrom(
        akka.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.ActorRef parseFrom(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(akka.stream.remote.StreamRefContainers.ActorRef prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        akka.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ActorRef}
     */
    public static final class Builder extends
        akka.protobuf.GeneratedMessage.Builder<Builder>
       implements akka.stream.remote.StreamRefContainers.ActorRefOrBuilder {
      public static final akka.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return akka.stream.remote.StreamRefContainers.internal_static_ActorRef_descriptor;
      }

      protected akka.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return akka.stream.remote.StreamRefContainers.internal_static_ActorRef_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                akka.stream.remote.StreamRefContainers.ActorRef.class, akka.stream.remote.StreamRefContainers.ActorRef.Builder.class);
      }

      // Construct using akka.stream.remote.StreamRefContainers.ActorRef.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          akka.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (akka.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        path_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public akka.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return akka.stream.remote.StreamRefContainers.internal_static_ActorRef_descriptor;
      }

      public akka.stream.remote.StreamRefContainers.ActorRef getDefaultInstanceForType() {
        return akka.stream.remote.StreamRefContainers.ActorRef.getDefaultInstance();
      }

      public akka.stream.remote.StreamRefContainers.ActorRef build() {
        akka.stream.remote.StreamRefContainers.ActorRef result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public akka.stream.remote.StreamRefContainers.ActorRef buildPartial() {
        akka.stream.remote.StreamRefContainers.ActorRef result = new akka.stream.remote.StreamRefContainers.ActorRef(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.path_ = path_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(akka.protobuf.Message other) {
        if (other instanceof akka.stream.remote.StreamRefContainers.ActorRef) {
          return mergeFrom((akka.stream.remote.StreamRefContainers.ActorRef)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(akka.stream.remote.StreamRefContainers.ActorRef other) {
        if (other == akka.stream.remote.StreamRefContainers.ActorRef.getDefaultInstance()) return this;
        if (other.hasPath()) {
          bitField0_ |= 0x00000001;
          path_ = other.path_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPath()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        akka.stream.remote.StreamRefContainers.ActorRef parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (akka.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (akka.stream.remote.StreamRefContainers.ActorRef) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string path = 1;
      private java.lang.Object path_ = "";
      /**
       * <code>required string path = 1;</code>
       */
      public boolean hasPath() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string path = 1;</code>
       */
      public java.lang.String getPath() {
        java.lang.Object ref = path_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((akka.protobuf.ByteString) ref)
              .toStringUtf8();
          path_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string path = 1;</code>
       */
      public akka.protobuf.ByteString
          getPathBytes() {
        java.lang.Object ref = path_;
        if (ref instanceof String) {
          akka.protobuf.ByteString b = 
              akka.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          path_ = b;
          return b;
        } else {
          return (akka.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string path = 1;</code>
       */
      public Builder setPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        path_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string path = 1;</code>
       */
      public Builder clearPath() {
        bitField0_ = (bitField0_ & ~0x00000001);
        path_ = getDefaultInstance().getPath();
        onChanged();
        return this;
      }
      /**
       * <code>required string path = 1;</code>
       */
      public Builder setPathBytes(
          akka.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        path_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ActorRef)
    }

    static {
      defaultInstance = new ActorRef(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ActorRef)
  }

  public interface OptionOrBuilder
      extends akka.protobuf.MessageOrBuilder {

    // optional .Payload value = 1;
    /**
     * <code>optional .Payload value = 1;</code>
     */
    boolean hasValue();
    /**
     * <code>optional .Payload value = 1;</code>
     */
    akka.stream.remote.StreamRefContainers.Payload getValue();
    /**
     * <code>optional .Payload value = 1;</code>
     */
    akka.stream.remote.StreamRefContainers.PayloadOrBuilder getValueOrBuilder();
  }
  /**
   * Protobuf type {@code Option}
   */
  public static final class Option extends
      akka.protobuf.GeneratedMessage
      implements OptionOrBuilder {
    // Use Option.newBuilder() to construct.
    private Option(akka.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Option(boolean noInit) { this.unknownFields = akka.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Option defaultInstance;
    public static Option getDefaultInstance() {
      return defaultInstance;
    }

    public Option getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final akka.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final akka.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Option(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      akka.protobuf.UnknownFieldSet.Builder unknownFields =
          akka.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              akka.stream.remote.StreamRefContainers.Payload.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = value_.toBuilder();
              }
              value_ = input.readMessage(akka.stream.remote.StreamRefContainers.Payload.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(value_);
                value_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (akka.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new akka.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final akka.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return akka.stream.remote.StreamRefContainers.internal_static_Option_descriptor;
    }

    protected akka.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return akka.stream.remote.StreamRefContainers.internal_static_Option_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              akka.stream.remote.StreamRefContainers.Option.class, akka.stream.remote.StreamRefContainers.Option.Builder.class);
    }

    public static akka.protobuf.Parser<Option> PARSER =
        new akka.protobuf.AbstractParser<Option>() {
      public Option parsePartialFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws akka.protobuf.InvalidProtocolBufferException {
        return new Option(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public akka.protobuf.Parser<Option> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .Payload value = 1;
    public static final int VALUE_FIELD_NUMBER = 1;
    private akka.stream.remote.StreamRefContainers.Payload value_;
    /**
     * <code>optional .Payload value = 1;</code>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .Payload value = 1;</code>
     */
    public akka.stream.remote.StreamRefContainers.Payload getValue() {
      return value_;
    }
    /**
     * <code>optional .Payload value = 1;</code>
     */
    public akka.stream.remote.StreamRefContainers.PayloadOrBuilder getValueOrBuilder() {
      return value_;
    }

    private void initFields() {
      value_ = akka.stream.remote.StreamRefContainers.Payload.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (hasValue()) {
        if (!getValue().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(akka.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, value_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += akka.protobuf.CodedOutputStream
          .computeMessageSize(1, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static akka.stream.remote.StreamRefContainers.Option parseFrom(
        akka.protobuf.ByteString data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.Option parseFrom(
        akka.protobuf.ByteString data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.Option parseFrom(byte[] data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.Option parseFrom(
        byte[] data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.Option parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.Option parseFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.Option parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.Option parseDelimitedFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.Option parseFrom(
        akka.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.Option parseFrom(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(akka.stream.remote.StreamRefContainers.Option prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        akka.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Option}
     */
    public static final class Builder extends
        akka.protobuf.GeneratedMessage.Builder<Builder>
       implements akka.stream.remote.StreamRefContainers.OptionOrBuilder {
      public static final akka.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return akka.stream.remote.StreamRefContainers.internal_static_Option_descriptor;
      }

      protected akka.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return akka.stream.remote.StreamRefContainers.internal_static_Option_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                akka.stream.remote.StreamRefContainers.Option.class, akka.stream.remote.StreamRefContainers.Option.Builder.class);
      }

      // Construct using akka.stream.remote.StreamRefContainers.Option.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          akka.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (akka.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getValueFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (valueBuilder_ == null) {
          value_ = akka.stream.remote.StreamRefContainers.Payload.getDefaultInstance();
        } else {
          valueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public akka.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return akka.stream.remote.StreamRefContainers.internal_static_Option_descriptor;
      }

      public akka.stream.remote.StreamRefContainers.Option getDefaultInstanceForType() {
        return akka.stream.remote.StreamRefContainers.Option.getDefaultInstance();
      }

      public akka.stream.remote.StreamRefContainers.Option build() {
        akka.stream.remote.StreamRefContainers.Option result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public akka.stream.remote.StreamRefContainers.Option buildPartial() {
        akka.stream.remote.StreamRefContainers.Option result = new akka.stream.remote.StreamRefContainers.Option(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (valueBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = valueBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(akka.protobuf.Message other) {
        if (other instanceof akka.stream.remote.StreamRefContainers.Option) {
          return mergeFrom((akka.stream.remote.StreamRefContainers.Option)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(akka.stream.remote.StreamRefContainers.Option other) {
        if (other == akka.stream.remote.StreamRefContainers.Option.getDefaultInstance()) return this;
        if (other.hasValue()) {
          mergeValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasValue()) {
          if (!getValue().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        akka.stream.remote.StreamRefContainers.Option parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (akka.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (akka.stream.remote.StreamRefContainers.Option) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .Payload value = 1;
      private akka.stream.remote.StreamRefContainers.Payload value_ = akka.stream.remote.StreamRefContainers.Payload.getDefaultInstance();
      private akka.protobuf.SingleFieldBuilder<
          akka.stream.remote.StreamRefContainers.Payload, akka.stream.remote.StreamRefContainers.Payload.Builder, akka.stream.remote.StreamRefContainers.PayloadOrBuilder> valueBuilder_;
      /**
       * <code>optional .Payload value = 1;</code>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .Payload value = 1;</code>
       */
      public akka.stream.remote.StreamRefContainers.Payload getValue() {
        if (valueBuilder_ == null) {
          return value_;
        } else {
          return valueBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .Payload value = 1;</code>
       */
      public Builder setValue(akka.stream.remote.StreamRefContainers.Payload value) {
        if (valueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
          onChanged();
        } else {
          valueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .Payload value = 1;</code>
       */
      public Builder setValue(
          akka.stream.remote.StreamRefContainers.Payload.Builder builderForValue) {
        if (valueBuilder_ == null) {
          value_ = builderForValue.build();
          onChanged();
        } else {
          valueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .Payload value = 1;</code>
       */
      public Builder mergeValue(akka.stream.remote.StreamRefContainers.Payload value) {
        if (valueBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              value_ != akka.stream.remote.StreamRefContainers.Payload.getDefaultInstance()) {
            value_ =
              akka.stream.remote.StreamRefContainers.Payload.newBuilder(value_).mergeFrom(value).buildPartial();
          } else {
            value_ = value;
          }
          onChanged();
        } else {
          valueBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .Payload value = 1;</code>
       */
      public Builder clearValue() {
        if (valueBuilder_ == null) {
          value_ = akka.stream.remote.StreamRefContainers.Payload.getDefaultInstance();
          onChanged();
        } else {
          valueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .Payload value = 1;</code>
       */
      public akka.stream.remote.StreamRefContainers.Payload.Builder getValueBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getValueFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Payload value = 1;</code>
       */
      public akka.stream.remote.StreamRefContainers.PayloadOrBuilder getValueOrBuilder() {
        if (valueBuilder_ != null) {
          return valueBuilder_.getMessageOrBuilder();
        } else {
          return value_;
        }
      }
      /**
       * <code>optional .Payload value = 1;</code>
       */
      private akka.protobuf.SingleFieldBuilder<
          akka.stream.remote.StreamRefContainers.Payload, akka.stream.remote.StreamRefContainers.Payload.Builder, akka.stream.remote.StreamRefContainers.PayloadOrBuilder> 
          getValueFieldBuilder() {
        if (valueBuilder_ == null) {
          valueBuilder_ = new akka.protobuf.SingleFieldBuilder<
              akka.stream.remote.StreamRefContainers.Payload, akka.stream.remote.StreamRefContainers.Payload.Builder, akka.stream.remote.StreamRefContainers.PayloadOrBuilder>(
                  value_,
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        return valueBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:Option)
    }

    static {
      defaultInstance = new Option(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Option)
  }

  public interface PayloadOrBuilder
      extends akka.protobuf.MessageOrBuilder {

    // required bytes enclosedMessage = 1;
    /**
     * <code>required bytes enclosedMessage = 1;</code>
     */
    boolean hasEnclosedMessage();
    /**
     * <code>required bytes enclosedMessage = 1;</code>
     */
    akka.protobuf.ByteString getEnclosedMessage();

    // required int32 serializerId = 2;
    /**
     * <code>required int32 serializerId = 2;</code>
     */
    boolean hasSerializerId();
    /**
     * <code>required int32 serializerId = 2;</code>
     */
    int getSerializerId();

    // optional bytes messageManifest = 4;
    /**
     * <code>optional bytes messageManifest = 4;</code>
     */
    boolean hasMessageManifest();
    /**
     * <code>optional bytes messageManifest = 4;</code>
     */
    akka.protobuf.ByteString getMessageManifest();
  }
  /**
   * Protobuf type {@code Payload}
   */
  public static final class Payload extends
      akka.protobuf.GeneratedMessage
      implements PayloadOrBuilder {
    // Use Payload.newBuilder() to construct.
    private Payload(akka.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Payload(boolean noInit) { this.unknownFields = akka.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Payload defaultInstance;
    public static Payload getDefaultInstance() {
      return defaultInstance;
    }

    public Payload getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final akka.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final akka.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Payload(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      akka.protobuf.UnknownFieldSet.Builder unknownFields =
          akka.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              enclosedMessage_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              serializerId_ = input.readInt32();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000004;
              messageManifest_ = input.readBytes();
              break;
            }
          }
        }
      } catch (akka.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new akka.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final akka.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return akka.stream.remote.StreamRefContainers.internal_static_Payload_descriptor;
    }

    protected akka.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return akka.stream.remote.StreamRefContainers.internal_static_Payload_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              akka.stream.remote.StreamRefContainers.Payload.class, akka.stream.remote.StreamRefContainers.Payload.Builder.class);
    }

    public static akka.protobuf.Parser<Payload> PARSER =
        new akka.protobuf.AbstractParser<Payload>() {
      public Payload parsePartialFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws akka.protobuf.InvalidProtocolBufferException {
        return new Payload(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public akka.protobuf.Parser<Payload> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required bytes enclosedMessage = 1;
    public static final int ENCLOSEDMESSAGE_FIELD_NUMBER = 1;
    private akka.protobuf.ByteString enclosedMessage_;
    /**
     * <code>required bytes enclosedMessage = 1;</code>
     */
    public boolean hasEnclosedMessage() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bytes enclosedMessage = 1;</code>
     */
    public akka.protobuf.ByteString getEnclosedMessage() {
      return enclosedMessage_;
    }

    // required int32 serializerId = 2;
    public static final int SERIALIZERID_FIELD_NUMBER = 2;
    private int serializerId_;
    /**
     * <code>required int32 serializerId = 2;</code>
     */
    public boolean hasSerializerId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 serializerId = 2;</code>
     */
    public int getSerializerId() {
      return serializerId_;
    }

    // optional bytes messageManifest = 4;
    public static final int MESSAGEMANIFEST_FIELD_NUMBER = 4;
    private akka.protobuf.ByteString messageManifest_;
    /**
     * <code>optional bytes messageManifest = 4;</code>
     */
    public boolean hasMessageManifest() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bytes messageManifest = 4;</code>
     */
    public akka.protobuf.ByteString getMessageManifest() {
      return messageManifest_;
    }

    private void initFields() {
      enclosedMessage_ = akka.protobuf.ByteString.EMPTY;
      serializerId_ = 0;
      messageManifest_ = akka.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasEnclosedMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSerializerId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(akka.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, enclosedMessage_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, serializerId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(4, messageManifest_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += akka.protobuf.CodedOutputStream
          .computeBytesSize(1, enclosedMessage_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += akka.protobuf.CodedOutputStream
          .computeInt32Size(2, serializerId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += akka.protobuf.CodedOutputStream
          .computeBytesSize(4, messageManifest_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static akka.stream.remote.StreamRefContainers.Payload parseFrom(
        akka.protobuf.ByteString data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.Payload parseFrom(
        akka.protobuf.ByteString data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.Payload parseFrom(byte[] data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.Payload parseFrom(
        byte[] data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.Payload parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.Payload parseFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.Payload parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.Payload parseDelimitedFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.Payload parseFrom(
        akka.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.Payload parseFrom(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(akka.stream.remote.StreamRefContainers.Payload prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        akka.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Payload}
     */
    public static final class Builder extends
        akka.protobuf.GeneratedMessage.Builder<Builder>
       implements akka.stream.remote.StreamRefContainers.PayloadOrBuilder {
      public static final akka.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return akka.stream.remote.StreamRefContainers.internal_static_Payload_descriptor;
      }

      protected akka.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return akka.stream.remote.StreamRefContainers.internal_static_Payload_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                akka.stream.remote.StreamRefContainers.Payload.class, akka.stream.remote.StreamRefContainers.Payload.Builder.class);
      }

      // Construct using akka.stream.remote.StreamRefContainers.Payload.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          akka.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (akka.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        enclosedMessage_ = akka.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        serializerId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        messageManifest_ = akka.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public akka.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return akka.stream.remote.StreamRefContainers.internal_static_Payload_descriptor;
      }

      public akka.stream.remote.StreamRefContainers.Payload getDefaultInstanceForType() {
        return akka.stream.remote.StreamRefContainers.Payload.getDefaultInstance();
      }

      public akka.stream.remote.StreamRefContainers.Payload build() {
        akka.stream.remote.StreamRefContainers.Payload result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public akka.stream.remote.StreamRefContainers.Payload buildPartial() {
        akka.stream.remote.StreamRefContainers.Payload result = new akka.stream.remote.StreamRefContainers.Payload(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.enclosedMessage_ = enclosedMessage_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.serializerId_ = serializerId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.messageManifest_ = messageManifest_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(akka.protobuf.Message other) {
        if (other instanceof akka.stream.remote.StreamRefContainers.Payload) {
          return mergeFrom((akka.stream.remote.StreamRefContainers.Payload)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(akka.stream.remote.StreamRefContainers.Payload other) {
        if (other == akka.stream.remote.StreamRefContainers.Payload.getDefaultInstance()) return this;
        if (other.hasEnclosedMessage()) {
          setEnclosedMessage(other.getEnclosedMessage());
        }
        if (other.hasSerializerId()) {
          setSerializerId(other.getSerializerId());
        }
        if (other.hasMessageManifest()) {
          setMessageManifest(other.getMessageManifest());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasEnclosedMessage()) {
          
          return false;
        }
        if (!hasSerializerId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        akka.stream.remote.StreamRefContainers.Payload parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (akka.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (akka.stream.remote.StreamRefContainers.Payload) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required bytes enclosedMessage = 1;
      private akka.protobuf.ByteString enclosedMessage_ = akka.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes enclosedMessage = 1;</code>
       */
      public boolean hasEnclosedMessage() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bytes enclosedMessage = 1;</code>
       */
      public akka.protobuf.ByteString getEnclosedMessage() {
        return enclosedMessage_;
      }
      /**
       * <code>required bytes enclosedMessage = 1;</code>
       */
      public Builder setEnclosedMessage(akka.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        enclosedMessage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes enclosedMessage = 1;</code>
       */
      public Builder clearEnclosedMessage() {
        bitField0_ = (bitField0_ & ~0x00000001);
        enclosedMessage_ = getDefaultInstance().getEnclosedMessage();
        onChanged();
        return this;
      }

      // required int32 serializerId = 2;
      private int serializerId_ ;
      /**
       * <code>required int32 serializerId = 2;</code>
       */
      public boolean hasSerializerId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 serializerId = 2;</code>
       */
      public int getSerializerId() {
        return serializerId_;
      }
      /**
       * <code>required int32 serializerId = 2;</code>
       */
      public Builder setSerializerId(int value) {
        bitField0_ |= 0x00000002;
        serializerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 serializerId = 2;</code>
       */
      public Builder clearSerializerId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        serializerId_ = 0;
        onChanged();
        return this;
      }

      // optional bytes messageManifest = 4;
      private akka.protobuf.ByteString messageManifest_ = akka.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes messageManifest = 4;</code>
       */
      public boolean hasMessageManifest() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bytes messageManifest = 4;</code>
       */
      public akka.protobuf.ByteString getMessageManifest() {
        return messageManifest_;
      }
      /**
       * <code>optional bytes messageManifest = 4;</code>
       */
      public Builder setMessageManifest(akka.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        messageManifest_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes messageManifest = 4;</code>
       */
      public Builder clearMessageManifest() {
        bitField0_ = (bitField0_ & ~0x00000004);
        messageManifest_ = getDefaultInstance().getMessageManifest();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Payload)
    }

    static {
      defaultInstance = new Payload(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Payload)
  }

  public interface CumulativeDemandOrBuilder
      extends akka.protobuf.MessageOrBuilder {

    // required int64 seqNr = 1;
    /**
     * <code>required int64 seqNr = 1;</code>
     */
    boolean hasSeqNr();
    /**
     * <code>required int64 seqNr = 1;</code>
     */
    long getSeqNr();
  }
  /**
   * Protobuf type {@code CumulativeDemand}
   */
  public static final class CumulativeDemand extends
      akka.protobuf.GeneratedMessage
      implements CumulativeDemandOrBuilder {
    // Use CumulativeDemand.newBuilder() to construct.
    private CumulativeDemand(akka.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CumulativeDemand(boolean noInit) { this.unknownFields = akka.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CumulativeDemand defaultInstance;
    public static CumulativeDemand getDefaultInstance() {
      return defaultInstance;
    }

    public CumulativeDemand getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final akka.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final akka.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CumulativeDemand(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      akka.protobuf.UnknownFieldSet.Builder unknownFields =
          akka.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seqNr_ = input.readInt64();
              break;
            }
          }
        }
      } catch (akka.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new akka.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final akka.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return akka.stream.remote.StreamRefContainers.internal_static_CumulativeDemand_descriptor;
    }

    protected akka.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return akka.stream.remote.StreamRefContainers.internal_static_CumulativeDemand_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              akka.stream.remote.StreamRefContainers.CumulativeDemand.class, akka.stream.remote.StreamRefContainers.CumulativeDemand.Builder.class);
    }

    public static akka.protobuf.Parser<CumulativeDemand> PARSER =
        new akka.protobuf.AbstractParser<CumulativeDemand>() {
      public CumulativeDemand parsePartialFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws akka.protobuf.InvalidProtocolBufferException {
        return new CumulativeDemand(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public akka.protobuf.Parser<CumulativeDemand> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int64 seqNr = 1;
    public static final int SEQNR_FIELD_NUMBER = 1;
    private long seqNr_;
    /**
     * <code>required int64 seqNr = 1;</code>
     */
    public boolean hasSeqNr() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 seqNr = 1;</code>
     */
    public long getSeqNr() {
      return seqNr_;
    }

    private void initFields() {
      seqNr_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSeqNr()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(akka.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, seqNr_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += akka.protobuf.CodedOutputStream
          .computeInt64Size(1, seqNr_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static akka.stream.remote.StreamRefContainers.CumulativeDemand parseFrom(
        akka.protobuf.ByteString data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.CumulativeDemand parseFrom(
        akka.protobuf.ByteString data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.CumulativeDemand parseFrom(byte[] data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.CumulativeDemand parseFrom(
        byte[] data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.CumulativeDemand parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.CumulativeDemand parseFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.CumulativeDemand parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.CumulativeDemand parseDelimitedFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.CumulativeDemand parseFrom(
        akka.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.CumulativeDemand parseFrom(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(akka.stream.remote.StreamRefContainers.CumulativeDemand prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        akka.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CumulativeDemand}
     */
    public static final class Builder extends
        akka.protobuf.GeneratedMessage.Builder<Builder>
       implements akka.stream.remote.StreamRefContainers.CumulativeDemandOrBuilder {
      public static final akka.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return akka.stream.remote.StreamRefContainers.internal_static_CumulativeDemand_descriptor;
      }

      protected akka.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return akka.stream.remote.StreamRefContainers.internal_static_CumulativeDemand_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                akka.stream.remote.StreamRefContainers.CumulativeDemand.class, akka.stream.remote.StreamRefContainers.CumulativeDemand.Builder.class);
      }

      // Construct using akka.stream.remote.StreamRefContainers.CumulativeDemand.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          akka.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (akka.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seqNr_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public akka.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return akka.stream.remote.StreamRefContainers.internal_static_CumulativeDemand_descriptor;
      }

      public akka.stream.remote.StreamRefContainers.CumulativeDemand getDefaultInstanceForType() {
        return akka.stream.remote.StreamRefContainers.CumulativeDemand.getDefaultInstance();
      }

      public akka.stream.remote.StreamRefContainers.CumulativeDemand build() {
        akka.stream.remote.StreamRefContainers.CumulativeDemand result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public akka.stream.remote.StreamRefContainers.CumulativeDemand buildPartial() {
        akka.stream.remote.StreamRefContainers.CumulativeDemand result = new akka.stream.remote.StreamRefContainers.CumulativeDemand(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seqNr_ = seqNr_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(akka.protobuf.Message other) {
        if (other instanceof akka.stream.remote.StreamRefContainers.CumulativeDemand) {
          return mergeFrom((akka.stream.remote.StreamRefContainers.CumulativeDemand)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(akka.stream.remote.StreamRefContainers.CumulativeDemand other) {
        if (other == akka.stream.remote.StreamRefContainers.CumulativeDemand.getDefaultInstance()) return this;
        if (other.hasSeqNr()) {
          setSeqNr(other.getSeqNr());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSeqNr()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        akka.stream.remote.StreamRefContainers.CumulativeDemand parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (akka.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (akka.stream.remote.StreamRefContainers.CumulativeDemand) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int64 seqNr = 1;
      private long seqNr_ ;
      /**
       * <code>required int64 seqNr = 1;</code>
       */
      public boolean hasSeqNr() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 seqNr = 1;</code>
       */
      public long getSeqNr() {
        return seqNr_;
      }
      /**
       * <code>required int64 seqNr = 1;</code>
       */
      public Builder setSeqNr(long value) {
        bitField0_ |= 0x00000001;
        seqNr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 seqNr = 1;</code>
       */
      public Builder clearSeqNr() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seqNr_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:CumulativeDemand)
    }

    static {
      defaultInstance = new CumulativeDemand(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:CumulativeDemand)
  }

  public interface SequencedOnNextOrBuilder
      extends akka.protobuf.MessageOrBuilder {

    // required int64 seqNr = 1;
    /**
     * <code>required int64 seqNr = 1;</code>
     */
    boolean hasSeqNr();
    /**
     * <code>required int64 seqNr = 1;</code>
     */
    long getSeqNr();

    // required .Payload payload = 2;
    /**
     * <code>required .Payload payload = 2;</code>
     */
    boolean hasPayload();
    /**
     * <code>required .Payload payload = 2;</code>
     */
    akka.stream.remote.StreamRefContainers.Payload getPayload();
    /**
     * <code>required .Payload payload = 2;</code>
     */
    akka.stream.remote.StreamRefContainers.PayloadOrBuilder getPayloadOrBuilder();
  }
  /**
   * Protobuf type {@code SequencedOnNext}
   */
  public static final class SequencedOnNext extends
      akka.protobuf.GeneratedMessage
      implements SequencedOnNextOrBuilder {
    // Use SequencedOnNext.newBuilder() to construct.
    private SequencedOnNext(akka.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SequencedOnNext(boolean noInit) { this.unknownFields = akka.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SequencedOnNext defaultInstance;
    public static SequencedOnNext getDefaultInstance() {
      return defaultInstance;
    }

    public SequencedOnNext getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final akka.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final akka.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SequencedOnNext(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      akka.protobuf.UnknownFieldSet.Builder unknownFields =
          akka.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seqNr_ = input.readInt64();
              break;
            }
            case 18: {
              akka.stream.remote.StreamRefContainers.Payload.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = payload_.toBuilder();
              }
              payload_ = input.readMessage(akka.stream.remote.StreamRefContainers.Payload.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(payload_);
                payload_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (akka.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new akka.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final akka.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return akka.stream.remote.StreamRefContainers.internal_static_SequencedOnNext_descriptor;
    }

    protected akka.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return akka.stream.remote.StreamRefContainers.internal_static_SequencedOnNext_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              akka.stream.remote.StreamRefContainers.SequencedOnNext.class, akka.stream.remote.StreamRefContainers.SequencedOnNext.Builder.class);
    }

    public static akka.protobuf.Parser<SequencedOnNext> PARSER =
        new akka.protobuf.AbstractParser<SequencedOnNext>() {
      public SequencedOnNext parsePartialFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws akka.protobuf.InvalidProtocolBufferException {
        return new SequencedOnNext(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public akka.protobuf.Parser<SequencedOnNext> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int64 seqNr = 1;
    public static final int SEQNR_FIELD_NUMBER = 1;
    private long seqNr_;
    /**
     * <code>required int64 seqNr = 1;</code>
     */
    public boolean hasSeqNr() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 seqNr = 1;</code>
     */
    public long getSeqNr() {
      return seqNr_;
    }

    // required .Payload payload = 2;
    public static final int PAYLOAD_FIELD_NUMBER = 2;
    private akka.stream.remote.StreamRefContainers.Payload payload_;
    /**
     * <code>required .Payload payload = 2;</code>
     */
    public boolean hasPayload() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .Payload payload = 2;</code>
     */
    public akka.stream.remote.StreamRefContainers.Payload getPayload() {
      return payload_;
    }
    /**
     * <code>required .Payload payload = 2;</code>
     */
    public akka.stream.remote.StreamRefContainers.PayloadOrBuilder getPayloadOrBuilder() {
      return payload_;
    }

    private void initFields() {
      seqNr_ = 0L;
      payload_ = akka.stream.remote.StreamRefContainers.Payload.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSeqNr()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPayload()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getPayload().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(akka.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, seqNr_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, payload_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += akka.protobuf.CodedOutputStream
          .computeInt64Size(1, seqNr_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += akka.protobuf.CodedOutputStream
          .computeMessageSize(2, payload_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static akka.stream.remote.StreamRefContainers.SequencedOnNext parseFrom(
        akka.protobuf.ByteString data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.SequencedOnNext parseFrom(
        akka.protobuf.ByteString data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.SequencedOnNext parseFrom(byte[] data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.SequencedOnNext parseFrom(
        byte[] data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.SequencedOnNext parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.SequencedOnNext parseFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.SequencedOnNext parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.SequencedOnNext parseDelimitedFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.SequencedOnNext parseFrom(
        akka.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.SequencedOnNext parseFrom(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(akka.stream.remote.StreamRefContainers.SequencedOnNext prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        akka.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SequencedOnNext}
     */
    public static final class Builder extends
        akka.protobuf.GeneratedMessage.Builder<Builder>
       implements akka.stream.remote.StreamRefContainers.SequencedOnNextOrBuilder {
      public static final akka.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return akka.stream.remote.StreamRefContainers.internal_static_SequencedOnNext_descriptor;
      }

      protected akka.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return akka.stream.remote.StreamRefContainers.internal_static_SequencedOnNext_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                akka.stream.remote.StreamRefContainers.SequencedOnNext.class, akka.stream.remote.StreamRefContainers.SequencedOnNext.Builder.class);
      }

      // Construct using akka.stream.remote.StreamRefContainers.SequencedOnNext.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          akka.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (akka.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPayloadFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seqNr_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (payloadBuilder_ == null) {
          payload_ = akka.stream.remote.StreamRefContainers.Payload.getDefaultInstance();
        } else {
          payloadBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public akka.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return akka.stream.remote.StreamRefContainers.internal_static_SequencedOnNext_descriptor;
      }

      public akka.stream.remote.StreamRefContainers.SequencedOnNext getDefaultInstanceForType() {
        return akka.stream.remote.StreamRefContainers.SequencedOnNext.getDefaultInstance();
      }

      public akka.stream.remote.StreamRefContainers.SequencedOnNext build() {
        akka.stream.remote.StreamRefContainers.SequencedOnNext result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public akka.stream.remote.StreamRefContainers.SequencedOnNext buildPartial() {
        akka.stream.remote.StreamRefContainers.SequencedOnNext result = new akka.stream.remote.StreamRefContainers.SequencedOnNext(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seqNr_ = seqNr_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (payloadBuilder_ == null) {
          result.payload_ = payload_;
        } else {
          result.payload_ = payloadBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(akka.protobuf.Message other) {
        if (other instanceof akka.stream.remote.StreamRefContainers.SequencedOnNext) {
          return mergeFrom((akka.stream.remote.StreamRefContainers.SequencedOnNext)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(akka.stream.remote.StreamRefContainers.SequencedOnNext other) {
        if (other == akka.stream.remote.StreamRefContainers.SequencedOnNext.getDefaultInstance()) return this;
        if (other.hasSeqNr()) {
          setSeqNr(other.getSeqNr());
        }
        if (other.hasPayload()) {
          mergePayload(other.getPayload());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSeqNr()) {
          
          return false;
        }
        if (!hasPayload()) {
          
          return false;
        }
        if (!getPayload().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        akka.stream.remote.StreamRefContainers.SequencedOnNext parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (akka.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (akka.stream.remote.StreamRefContainers.SequencedOnNext) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int64 seqNr = 1;
      private long seqNr_ ;
      /**
       * <code>required int64 seqNr = 1;</code>
       */
      public boolean hasSeqNr() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 seqNr = 1;</code>
       */
      public long getSeqNr() {
        return seqNr_;
      }
      /**
       * <code>required int64 seqNr = 1;</code>
       */
      public Builder setSeqNr(long value) {
        bitField0_ |= 0x00000001;
        seqNr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 seqNr = 1;</code>
       */
      public Builder clearSeqNr() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seqNr_ = 0L;
        onChanged();
        return this;
      }

      // required .Payload payload = 2;
      private akka.stream.remote.StreamRefContainers.Payload payload_ = akka.stream.remote.StreamRefContainers.Payload.getDefaultInstance();
      private akka.protobuf.SingleFieldBuilder<
          akka.stream.remote.StreamRefContainers.Payload, akka.stream.remote.StreamRefContainers.Payload.Builder, akka.stream.remote.StreamRefContainers.PayloadOrBuilder> payloadBuilder_;
      /**
       * <code>required .Payload payload = 2;</code>
       */
      public boolean hasPayload() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .Payload payload = 2;</code>
       */
      public akka.stream.remote.StreamRefContainers.Payload getPayload() {
        if (payloadBuilder_ == null) {
          return payload_;
        } else {
          return payloadBuilder_.getMessage();
        }
      }
      /**
       * <code>required .Payload payload = 2;</code>
       */
      public Builder setPayload(akka.stream.remote.StreamRefContainers.Payload value) {
        if (payloadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          payload_ = value;
          onChanged();
        } else {
          payloadBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .Payload payload = 2;</code>
       */
      public Builder setPayload(
          akka.stream.remote.StreamRefContainers.Payload.Builder builderForValue) {
        if (payloadBuilder_ == null) {
          payload_ = builderForValue.build();
          onChanged();
        } else {
          payloadBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .Payload payload = 2;</code>
       */
      public Builder mergePayload(akka.stream.remote.StreamRefContainers.Payload value) {
        if (payloadBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              payload_ != akka.stream.remote.StreamRefContainers.Payload.getDefaultInstance()) {
            payload_ =
              akka.stream.remote.StreamRefContainers.Payload.newBuilder(payload_).mergeFrom(value).buildPartial();
          } else {
            payload_ = value;
          }
          onChanged();
        } else {
          payloadBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .Payload payload = 2;</code>
       */
      public Builder clearPayload() {
        if (payloadBuilder_ == null) {
          payload_ = akka.stream.remote.StreamRefContainers.Payload.getDefaultInstance();
          onChanged();
        } else {
          payloadBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .Payload payload = 2;</code>
       */
      public akka.stream.remote.StreamRefContainers.Payload.Builder getPayloadBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getPayloadFieldBuilder().getBuilder();
      }
      /**
       * <code>required .Payload payload = 2;</code>
       */
      public akka.stream.remote.StreamRefContainers.PayloadOrBuilder getPayloadOrBuilder() {
        if (payloadBuilder_ != null) {
          return payloadBuilder_.getMessageOrBuilder();
        } else {
          return payload_;
        }
      }
      /**
       * <code>required .Payload payload = 2;</code>
       */
      private akka.protobuf.SingleFieldBuilder<
          akka.stream.remote.StreamRefContainers.Payload, akka.stream.remote.StreamRefContainers.Payload.Builder, akka.stream.remote.StreamRefContainers.PayloadOrBuilder> 
          getPayloadFieldBuilder() {
        if (payloadBuilder_ == null) {
          payloadBuilder_ = new akka.protobuf.SingleFieldBuilder<
              akka.stream.remote.StreamRefContainers.Payload, akka.stream.remote.StreamRefContainers.Payload.Builder, akka.stream.remote.StreamRefContainers.PayloadOrBuilder>(
                  payload_,
                  getParentForChildren(),
                  isClean());
          payload_ = null;
        }
        return payloadBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:SequencedOnNext)
    }

    static {
      defaultInstance = new SequencedOnNext(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:SequencedOnNext)
  }

  public interface RemoteSinkFailureOrBuilder
      extends akka.protobuf.MessageOrBuilder {

    // optional bytes cause = 1;
    /**
     * <code>optional bytes cause = 1;</code>
     */
    boolean hasCause();
    /**
     * <code>optional bytes cause = 1;</code>
     */
    akka.protobuf.ByteString getCause();
  }
  /**
   * Protobuf type {@code RemoteSinkFailure}
   */
  public static final class RemoteSinkFailure extends
      akka.protobuf.GeneratedMessage
      implements RemoteSinkFailureOrBuilder {
    // Use RemoteSinkFailure.newBuilder() to construct.
    private RemoteSinkFailure(akka.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RemoteSinkFailure(boolean noInit) { this.unknownFields = akka.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RemoteSinkFailure defaultInstance;
    public static RemoteSinkFailure getDefaultInstance() {
      return defaultInstance;
    }

    public RemoteSinkFailure getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final akka.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final akka.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RemoteSinkFailure(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      akka.protobuf.UnknownFieldSet.Builder unknownFields =
          akka.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              cause_ = input.readBytes();
              break;
            }
          }
        }
      } catch (akka.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new akka.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final akka.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return akka.stream.remote.StreamRefContainers.internal_static_RemoteSinkFailure_descriptor;
    }

    protected akka.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return akka.stream.remote.StreamRefContainers.internal_static_RemoteSinkFailure_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              akka.stream.remote.StreamRefContainers.RemoteSinkFailure.class, akka.stream.remote.StreamRefContainers.RemoteSinkFailure.Builder.class);
    }

    public static akka.protobuf.Parser<RemoteSinkFailure> PARSER =
        new akka.protobuf.AbstractParser<RemoteSinkFailure>() {
      public RemoteSinkFailure parsePartialFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws akka.protobuf.InvalidProtocolBufferException {
        return new RemoteSinkFailure(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public akka.protobuf.Parser<RemoteSinkFailure> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bytes cause = 1;
    public static final int CAUSE_FIELD_NUMBER = 1;
    private akka.protobuf.ByteString cause_;
    /**
     * <code>optional bytes cause = 1;</code>
     */
    public boolean hasCause() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bytes cause = 1;</code>
     */
    public akka.protobuf.ByteString getCause() {
      return cause_;
    }

    private void initFields() {
      cause_ = akka.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(akka.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, cause_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += akka.protobuf.CodedOutputStream
          .computeBytesSize(1, cause_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static akka.stream.remote.StreamRefContainers.RemoteSinkFailure parseFrom(
        akka.protobuf.ByteString data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkFailure parseFrom(
        akka.protobuf.ByteString data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkFailure parseFrom(byte[] data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkFailure parseFrom(
        byte[] data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkFailure parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkFailure parseFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkFailure parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkFailure parseDelimitedFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkFailure parseFrom(
        akka.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkFailure parseFrom(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(akka.stream.remote.StreamRefContainers.RemoteSinkFailure prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        akka.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code RemoteSinkFailure}
     */
    public static final class Builder extends
        akka.protobuf.GeneratedMessage.Builder<Builder>
       implements akka.stream.remote.StreamRefContainers.RemoteSinkFailureOrBuilder {
      public static final akka.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return akka.stream.remote.StreamRefContainers.internal_static_RemoteSinkFailure_descriptor;
      }

      protected akka.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return akka.stream.remote.StreamRefContainers.internal_static_RemoteSinkFailure_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                akka.stream.remote.StreamRefContainers.RemoteSinkFailure.class, akka.stream.remote.StreamRefContainers.RemoteSinkFailure.Builder.class);
      }

      // Construct using akka.stream.remote.StreamRefContainers.RemoteSinkFailure.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          akka.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (akka.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cause_ = akka.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public akka.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return akka.stream.remote.StreamRefContainers.internal_static_RemoteSinkFailure_descriptor;
      }

      public akka.stream.remote.StreamRefContainers.RemoteSinkFailure getDefaultInstanceForType() {
        return akka.stream.remote.StreamRefContainers.RemoteSinkFailure.getDefaultInstance();
      }

      public akka.stream.remote.StreamRefContainers.RemoteSinkFailure build() {
        akka.stream.remote.StreamRefContainers.RemoteSinkFailure result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public akka.stream.remote.StreamRefContainers.RemoteSinkFailure buildPartial() {
        akka.stream.remote.StreamRefContainers.RemoteSinkFailure result = new akka.stream.remote.StreamRefContainers.RemoteSinkFailure(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cause_ = cause_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(akka.protobuf.Message other) {
        if (other instanceof akka.stream.remote.StreamRefContainers.RemoteSinkFailure) {
          return mergeFrom((akka.stream.remote.StreamRefContainers.RemoteSinkFailure)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(akka.stream.remote.StreamRefContainers.RemoteSinkFailure other) {
        if (other == akka.stream.remote.StreamRefContainers.RemoteSinkFailure.getDefaultInstance()) return this;
        if (other.hasCause()) {
          setCause(other.getCause());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        akka.stream.remote.StreamRefContainers.RemoteSinkFailure parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (akka.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (akka.stream.remote.StreamRefContainers.RemoteSinkFailure) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bytes cause = 1;
      private akka.protobuf.ByteString cause_ = akka.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes cause = 1;</code>
       */
      public boolean hasCause() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bytes cause = 1;</code>
       */
      public akka.protobuf.ByteString getCause() {
        return cause_;
      }
      /**
       * <code>optional bytes cause = 1;</code>
       */
      public Builder setCause(akka.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        cause_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes cause = 1;</code>
       */
      public Builder clearCause() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cause_ = getDefaultInstance().getCause();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:RemoteSinkFailure)
    }

    static {
      defaultInstance = new RemoteSinkFailure(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:RemoteSinkFailure)
  }

  public interface RemoteSinkCompletedOrBuilder
      extends akka.protobuf.MessageOrBuilder {

    // required int64 seqNr = 1;
    /**
     * <code>required int64 seqNr = 1;</code>
     */
    boolean hasSeqNr();
    /**
     * <code>required int64 seqNr = 1;</code>
     */
    long getSeqNr();
  }
  /**
   * Protobuf type {@code RemoteSinkCompleted}
   */
  public static final class RemoteSinkCompleted extends
      akka.protobuf.GeneratedMessage
      implements RemoteSinkCompletedOrBuilder {
    // Use RemoteSinkCompleted.newBuilder() to construct.
    private RemoteSinkCompleted(akka.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RemoteSinkCompleted(boolean noInit) { this.unknownFields = akka.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RemoteSinkCompleted defaultInstance;
    public static RemoteSinkCompleted getDefaultInstance() {
      return defaultInstance;
    }

    public RemoteSinkCompleted getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final akka.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final akka.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RemoteSinkCompleted(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      akka.protobuf.UnknownFieldSet.Builder unknownFields =
          akka.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seqNr_ = input.readInt64();
              break;
            }
          }
        }
      } catch (akka.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new akka.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final akka.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return akka.stream.remote.StreamRefContainers.internal_static_RemoteSinkCompleted_descriptor;
    }

    protected akka.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return akka.stream.remote.StreamRefContainers.internal_static_RemoteSinkCompleted_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              akka.stream.remote.StreamRefContainers.RemoteSinkCompleted.class, akka.stream.remote.StreamRefContainers.RemoteSinkCompleted.Builder.class);
    }

    public static akka.protobuf.Parser<RemoteSinkCompleted> PARSER =
        new akka.protobuf.AbstractParser<RemoteSinkCompleted>() {
      public RemoteSinkCompleted parsePartialFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws akka.protobuf.InvalidProtocolBufferException {
        return new RemoteSinkCompleted(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public akka.protobuf.Parser<RemoteSinkCompleted> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int64 seqNr = 1;
    public static final int SEQNR_FIELD_NUMBER = 1;
    private long seqNr_;
    /**
     * <code>required int64 seqNr = 1;</code>
     */
    public boolean hasSeqNr() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 seqNr = 1;</code>
     */
    public long getSeqNr() {
      return seqNr_;
    }

    private void initFields() {
      seqNr_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSeqNr()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(akka.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, seqNr_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += akka.protobuf.CodedOutputStream
          .computeInt64Size(1, seqNr_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static akka.stream.remote.StreamRefContainers.RemoteSinkCompleted parseFrom(
        akka.protobuf.ByteString data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkCompleted parseFrom(
        akka.protobuf.ByteString data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkCompleted parseFrom(byte[] data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkCompleted parseFrom(
        byte[] data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkCompleted parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkCompleted parseFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkCompleted parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkCompleted parseDelimitedFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkCompleted parseFrom(
        akka.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.stream.remote.StreamRefContainers.RemoteSinkCompleted parseFrom(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(akka.stream.remote.StreamRefContainers.RemoteSinkCompleted prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        akka.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code RemoteSinkCompleted}
     */
    public static final class Builder extends
        akka.protobuf.GeneratedMessage.Builder<Builder>
       implements akka.stream.remote.StreamRefContainers.RemoteSinkCompletedOrBuilder {
      public static final akka.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return akka.stream.remote.StreamRefContainers.internal_static_RemoteSinkCompleted_descriptor;
      }

      protected akka.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return akka.stream.remote.StreamRefContainers.internal_static_RemoteSinkCompleted_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                akka.stream.remote.StreamRefContainers.RemoteSinkCompleted.class, akka.stream.remote.StreamRefContainers.RemoteSinkCompleted.Builder.class);
      }

      // Construct using akka.stream.remote.StreamRefContainers.RemoteSinkCompleted.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          akka.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (akka.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seqNr_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public akka.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return akka.stream.remote.StreamRefContainers.internal_static_RemoteSinkCompleted_descriptor;
      }

      public akka.stream.remote.StreamRefContainers.RemoteSinkCompleted getDefaultInstanceForType() {
        return akka.stream.remote.StreamRefContainers.RemoteSinkCompleted.getDefaultInstance();
      }

      public akka.stream.remote.StreamRefContainers.RemoteSinkCompleted build() {
        akka.stream.remote.StreamRefContainers.RemoteSinkCompleted result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public akka.stream.remote.StreamRefContainers.RemoteSinkCompleted buildPartial() {
        akka.stream.remote.StreamRefContainers.RemoteSinkCompleted result = new akka.stream.remote.StreamRefContainers.RemoteSinkCompleted(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seqNr_ = seqNr_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(akka.protobuf.Message other) {
        if (other instanceof akka.stream.remote.StreamRefContainers.RemoteSinkCompleted) {
          return mergeFrom((akka.stream.remote.StreamRefContainers.RemoteSinkCompleted)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(akka.stream.remote.StreamRefContainers.RemoteSinkCompleted other) {
        if (other == akka.stream.remote.StreamRefContainers.RemoteSinkCompleted.getDefaultInstance()) return this;
        if (other.hasSeqNr()) {
          setSeqNr(other.getSeqNr());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSeqNr()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        akka.stream.remote.StreamRefContainers.RemoteSinkCompleted parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (akka.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (akka.stream.remote.StreamRefContainers.RemoteSinkCompleted) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int64 seqNr = 1;
      private long seqNr_ ;
      /**
       * <code>required int64 seqNr = 1;</code>
       */
      public boolean hasSeqNr() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 seqNr = 1;</code>
       */
      public long getSeqNr() {
        return seqNr_;
      }
      /**
       * <code>required int64 seqNr = 1;</code>
       */
      public Builder setSeqNr(long value) {
        bitField0_ |= 0x00000001;
        seqNr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 seqNr = 1;</code>
       */
      public Builder clearSeqNr() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seqNr_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:RemoteSinkCompleted)
    }

    static {
      defaultInstance = new RemoteSinkCompleted(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:RemoteSinkCompleted)
  }

  private static akka.protobuf.Descriptors.Descriptor
    internal_static_SinkRef_descriptor;
  private static
    akka.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_SinkRef_fieldAccessorTable;
  private static akka.protobuf.Descriptors.Descriptor
    internal_static_SourceRef_descriptor;
  private static
    akka.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_SourceRef_fieldAccessorTable;
  private static akka.protobuf.Descriptors.Descriptor
    internal_static_ActorRef_descriptor;
  private static
    akka.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ActorRef_fieldAccessorTable;
  private static akka.protobuf.Descriptors.Descriptor
    internal_static_Option_descriptor;
  private static
    akka.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Option_fieldAccessorTable;
  private static akka.protobuf.Descriptors.Descriptor
    internal_static_Payload_descriptor;
  private static
    akka.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Payload_fieldAccessorTable;
  private static akka.protobuf.Descriptors.Descriptor
    internal_static_CumulativeDemand_descriptor;
  private static
    akka.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_CumulativeDemand_fieldAccessorTable;
  private static akka.protobuf.Descriptors.Descriptor
    internal_static_SequencedOnNext_descriptor;
  private static
    akka.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_SequencedOnNext_fieldAccessorTable;
  private static akka.protobuf.Descriptors.Descriptor
    internal_static_RemoteSinkFailure_descriptor;
  private static
    akka.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_RemoteSinkFailure_fieldAccessorTable;
  private static akka.protobuf.Descriptors.Descriptor
    internal_static_RemoteSinkCompleted_descriptor;
  private static
    akka.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_RemoteSinkCompleted_fieldAccessorTable;

  public static akka.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static akka.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031StreamRefContainers.proto\">\n\007SinkRef\022\034" +
      "\n\ttargetRef\030\001 \002(\0132\t.ActorRef\022\025\n\rinitialD" +
      "emand\030\002 \001(\003\")\n\tSourceRef\022\034\n\toriginRef\030\001 " +
      "\002(\0132\t.ActorRef\"\030\n\010ActorRef\022\014\n\004path\030\001 \002(\t" +
      "\"!\n\006Option\022\027\n\005value\030\001 \001(\0132\010.Payload\"Q\n\007P" +
      "ayload\022\027\n\017enclosedMessage\030\001 \002(\014\022\024\n\014seria" +
      "lizerId\030\002 \002(\005\022\027\n\017messageManifest\030\004 \001(\014\"!" +
      "\n\020CumulativeDemand\022\r\n\005seqNr\030\001 \002(\003\";\n\017Seq" +
      "uencedOnNext\022\r\n\005seqNr\030\001 \002(\003\022\031\n\007payload\030\002" +
      " \002(\0132\010.Payload\"\"\n\021RemoteSinkFailure\022\r\n\005c",
      "ause\030\001 \001(\014\"$\n\023RemoteSinkCompleted\022\r\n\005seq" +
      "Nr\030\001 \002(\003B\026\n\022akka.stream.remoteH\001"
    };
    akka.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new akka.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public akka.protobuf.ExtensionRegistry assignDescriptors(
            akka.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_SinkRef_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_SinkRef_fieldAccessorTable = new
            akka.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_SinkRef_descriptor,
              new java.lang.String[] { "TargetRef", "InitialDemand", });
          internal_static_SourceRef_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_SourceRef_fieldAccessorTable = new
            akka.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_SourceRef_descriptor,
              new java.lang.String[] { "OriginRef", });
          internal_static_ActorRef_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_ActorRef_fieldAccessorTable = new
            akka.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ActorRef_descriptor,
              new java.lang.String[] { "Path", });
          internal_static_Option_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_Option_fieldAccessorTable = new
            akka.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Option_descriptor,
              new java.lang.String[] { "Value", });
          internal_static_Payload_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_Payload_fieldAccessorTable = new
            akka.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Payload_descriptor,
              new java.lang.String[] { "EnclosedMessage", "SerializerId", "MessageManifest", });
          internal_static_CumulativeDemand_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_CumulativeDemand_fieldAccessorTable = new
            akka.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_CumulativeDemand_descriptor,
              new java.lang.String[] { "SeqNr", });
          internal_static_SequencedOnNext_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_SequencedOnNext_fieldAccessorTable = new
            akka.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_SequencedOnNext_descriptor,
              new java.lang.String[] { "SeqNr", "Payload", });
          internal_static_RemoteSinkFailure_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_RemoteSinkFailure_fieldAccessorTable = new
            akka.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_RemoteSinkFailure_descriptor,
              new java.lang.String[] { "Cause", });
          internal_static_RemoteSinkCompleted_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_RemoteSinkCompleted_fieldAccessorTable = new
            akka.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_RemoteSinkCompleted_descriptor,
              new java.lang.String[] { "SeqNr", });
          return null;
        }
      };
    akka.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new akka.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}

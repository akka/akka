<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://akka.io/schema/akka"
            targetNamespace="http://akka.io/schema/akka"
            elementFormDefault="qualified" attributeFormDefault="unqualified"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:beans="http://www.springframework.org/schema/beans">

  <xsd:import namespace="http://www.springframework.org/schema/beans"
              schemaLocation="http://www.springframework.org/schema/beans/spring-beans-3.0.xsd" />

  <!-- base types -->

  <!-- restart strategies enumeration -->
  <xsd:simpleType name="failover-type">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="AllForOne"/>
      <xsd:enumeration value="OneForOne"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- restart strategies enumeration -->
  <xsd:simpleType name="lifecycle-type">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="permanent"/>
      <xsd:enumeration value="temporary"/>
    </xsd:restriction>
  </xsd:simpleType>

 <!-- Scopes enumeration -->
  <xsd:simpleType name="scope-enum-type">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="prototype"/>
      <xsd:enumeration value="singleton"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- dispatchers enumeration -->
  <xsd:simpleType name="dispatcher-enum-type">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="executor-based-event-driven"/>
      <xsd:enumeration value="executor-based-event-driven-work-stealing"/>
      <xsd:enumeration value="thread-based"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- dispatcher queue types enumeration -->
  <xsd:simpleType name="dispatcher-queue-type">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="bounded-linked-blocking-queue"/>
      <xsd:enumeration value="unbounded-linked-blocking-queue"/>
      <xsd:enumeration value="synchronous-queue"/>
      <xsd:enumeration value="bounded-array-blocking-queue"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- thread pool rejection policies enumeration -->
  <xsd:simpleType name="rejection-policy-type">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="abort-policy"/>
      <xsd:enumeration value="caller-runs-policy"/>
      <xsd:enumeration value="discard-oldest-policy"/>
      <xsd:enumeration value="discard-policy"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- management type for remote actors: client managed / server managed -->
  <xsd:simpleType name="managed-by-type">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="client"/>
      <xsd:enumeration value="server"/>
    </xsd:restriction>
  </xsd:simpleType>


  <!-- dispatcher type -->
  <xsd:complexType name="dispatcher-type">
    <xsd:choice minOccurs="0" maxOccurs="1">
      <xsd:element name="thread-pool" type="threadpool-type"/>
    </xsd:choice>
    <xsd:attribute name="id" type="xsd:ID"/>
    <xsd:attribute name="ref" type="xsd:string"/>
    <xsd:attribute name="type" type="dispatcher-enum-type"/>
    <xsd:attribute name="name" type="xsd:string"/>
    <xsd:attribute name="aggregate" type="xsd:boolean"/>
  </xsd:complexType>

  <xsd:complexType name="threadpool-type">
    <xsd:attribute name="queue" type="dispatcher-queue-type"/>
    <xsd:attribute name="bound" type="xsd:integer"/>
    <xsd:attribute name="capacity" type="xsd:integer"/>
    <xsd:attribute name="fairness" type="xsd:boolean"/>
    <xsd:attribute name="core-pool-size" type="xsd:integer"/>
    <xsd:attribute name="max-pool-size" type="xsd:integer"/>
    <xsd:attribute name="keep-alive" type="xsd:long"/>
    <xsd:attribute name="rejection-policy" type="rejection-policy-type"/>
    <xsd:attribute name="mailbox-capacity" type="xsd:integer"/>
  </xsd:complexType>

  <!-- Remote -->
  <xsd:complexType name="remote-type">
    <xsd:attribute name="host" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>
          Name of the remote host.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="port" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>
          Port of the remote host.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="managed-by" type="managed-by-type">
      <xsd:annotation>
        <xsd:documentation>
          Management type for remote actors: client managed or server managed.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="service-name" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          Custom service name for server managed actor.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>

  <!-- typed actor -->
  <xsd:complexType name="typed-actor-type">
   <xsd:sequence>
      <xsd:element name="remote" type="remote-type" minOccurs="0" maxOccurs="1"/>
      <xsd:element name="dispatcher" type="dispatcher-type" minOccurs="0" maxOccurs="1"/>
      <xsd:element ref="dispatcher" minOccurs="0" maxOccurs="1"/>
      <xsd:element ref="beans:property" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
    <xsd:attribute name="interface" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>
          Name of the interface implemented by implementation class.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="implementation" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          Name of the implementation class.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="ref" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          Bean instance behind the actor
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="timeout" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>
          The default timeout for '!!' invocations in milliseconds.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="lifecycle" type="lifecycle-type">
      <xsd:annotation>
        <xsd:documentation>
          Defines the lifecycle, can be either 'permanent' or 'temporary'.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="scope" type="scope-enum-type">
      <xsd:annotation>
        <xsd:documentation>
          Supported scopes are 'singleton' and 'prototype'.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="depends-on" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          comma-separated list of beans that must be initialized before this bean
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>

  <!-- untyped actor -->
  <xsd:complexType name="untyped-actor-type">
   <xsd:sequence>
      <xsd:element name="remote" type="remote-type" minOccurs="0" maxOccurs="1"/>
      <xsd:element name="dispatcher" type="dispatcher-type" minOccurs="0" maxOccurs="1"/>
      <xsd:element ref="dispatcher" minOccurs="0" maxOccurs="1"/>
      <xsd:element ref="beans:property" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
    <xsd:attribute name="implementation" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          Name of the implementation class.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="ref" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          Bean instance behind the actor
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="timeout" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          The default timeout for '!!' invocations in milliseconds.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="lifecycle" type="lifecycle-type">
      <xsd:annotation>
        <xsd:documentation>
          Defines the lifecycle, can be either 'permanent' or 'temporary'.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="scope" type="scope-enum-type">
      <xsd:annotation>
        <xsd:documentation>
          Supported scopes are 'singleton' and 'prototype'.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="autostart" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          true or false, defaults to false if omitted.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="depends-on" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          comma-separated list of beans that must be initialized before this bean
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>

  <!-- trap exits -->
  <xsd:complexType name="trap-exits-type">
    <xsd:choice minOccurs="1" maxOccurs="unbounded">
      <xsd:element name="trap-exit" type="xsd:string"/>
    </xsd:choice>
  </xsd:complexType>

  <!-- typed actors -->
  <xsd:complexType name="typed-actors-type">
    <xsd:choice minOccurs="1" maxOccurs="unbounded">
      <xsd:element name="typed-actor" type="typed-actor-type"/>
    </xsd:choice>
  </xsd:complexType>

  <!-- untyped actors -->
  <xsd:complexType name="untyped-actors-type">
    <xsd:choice minOccurs="1" maxOccurs="unbounded">
      <xsd:element name="untyped-actor" type="untyped-actor-type"/>
    </xsd:choice>
  </xsd:complexType>

  <!-- actor-for -->
   <!-- typed actor -->
  <xsd:complexType name="actor-for-type">
    <xsd:attribute name="id" type="xsd:ID"/>
     <xsd:attribute name="host" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>
          Name of the remote host.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="port" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>
          Port of the remote host.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="service-name" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>
          Custom service name or class name for the server managed actor.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="interface" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          Name of the interface the typed actor implements.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>

  </xsd:complexType>

  <!-- Supervisor strategy -->
  <xsd:complexType name="strategy-type">
    <xsd:sequence>
      <xsd:element name="trap-exits" type="trap-exits-type" minOccurs="1" maxOccurs="1"/>
    </xsd:sequence>
    <xsd:attribute name="failover" type="failover-type">
      <xsd:annotation>
        <xsd:documentation>
          Failover scheme, can be one of 'AllForOne' or 'OneForOne'.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="retries" type="xsd:int">
      <xsd:annotation>
        <xsd:documentation>
          Maximal number of restarts.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="timerange" type="xsd:int">
      <xsd:annotation>
        <xsd:documentation>
          Time range for maximal number of restart.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>

  <!-- Supervisor strategy -->
  <xsd:complexType name="supervision-type">
    <xsd:all>
      <xsd:element name="restart-strategy" type="strategy-type" minOccurs="1" maxOccurs="1"/>
      <xsd:element name="typed-actors" type="typed-actors-type" minOccurs="0" maxOccurs="1"/>
      <xsd:element name="untyped-actors" type="untyped-actors-type" minOccurs="0" maxOccurs="1"/>
      <xsd:element name="supervision" type="supervision-type" minOccurs="0"/>
    </xsd:all>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>

  <xsd:complexType name="camel-service-type">
    <xsd:sequence>
      <xsd:element name="camel-context" type="camel-context-type" minOccurs="0" maxOccurs="1"/>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>

  <xsd:complexType name="camel-context-type">
    <xsd:attribute name="ref" type="xsd:string"/>
  </xsd:complexType>


  <xsd:complexType name="config-type">
    <xsd:attribute name="location" type="xsd:string"/>
  </xsd:complexType>

  <!-- akka conf -->
  <xsd:element name="property-placeholder" type="config-type"/>

  <!-- TypedActor -->
  <xsd:element name="typed-actor" type="typed-actor-type"/>

  <!-- UntypedActor -->
  <xsd:element name="untyped-actor" type="untyped-actor-type"/>

  <!-- Dispatcher -->
  <xsd:element name="dispatcher" type="dispatcher-type"/>

  <!-- Supervision -->
  <xsd:element name="supervision" type="supervision-type"/>

  <!-- CamelService -->
  <xsd:element name="camel-service" type="camel-service-type"/>

  <!-- ActorFor -->
  <xsd:element name="actor-for" type="actor-for-type"/>

</xsd:schema>

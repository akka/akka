##############################
# Akka Reference Config File #
##############################

# This the reference config file has all the default settings.
# Make your edits/overrides in your application.conf.

akka {
  # Akka version, checked against the runtime version of Akka.
  version = "2.0-SNAPSHOT"

  # Home directory of Akka, modules in the deploy directory will be loaded
  home = ""

  # Event handlers to register at boot time (Logging$DefaultLogger logs to STDOUT)
  event-handlers = ["akka.event.Logging$DefaultLogger"]

  # Log level used by the configured loggers (see "event-handlers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # Log level for the very basic logger activated during AkkaApplication startup
  # Options: ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "WARNING"

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  logConfigOnStart = off

  # List FQCN of extensions which shall be loaded at actor system startup.
  # Should be on the format: 'extensions = ["foo", "bar"]' etc.
  # FIXME: clarify "extensions" here, "Akka Extensions (<link to docs>)"
  extensions = []

  actor {

    provider = "akka.actor.LocalActorRefProvider"

    # Timeout for ActorSystem.actorOf
    creation-timeout = 20s

    # frequency with which stopping actors are prodded in case they had to be
    # removed from their parents
    reaper-interval = 5s

    # Default timeout for Future based invocations
    #    - Actor:        ask && ?
    #    - UntypedActor: ask
    #    - TypedActor:   methods with non-void return type
    timeout = 5s

    # Does a deep clone of (non-primitive) messages to ensure immutability
    # FIXME: not used, make use of it or remove the option
    serialize-messages = off

    deployment {

      # deployment id pattern - on the format: /parent/child etc.
      default {

        # routing (load-balance) scheme to use
        #     available: "from-code", "round-robin", "random", "scatter-gather", "broadcast"
        #     or:        fully qualified class name of the router class
        #     default is "from-code";
        # Whether or not an actor is transformed to a Router is decided in code only (Props.withRouter).
        # The type of router can be overridden in the configuration; specifying "from-code" means
        # that the values specified in the code shall be used.
        # In case of routing, the actors to be routed to can be specified
        # in several ways:
        # - nr-of-instances: will create that many children given the actor factory
        #   supplied in the source code (overridable using create-as below)
        # - routees.paths: will look the paths up using actorFor and route to
        #   them, i.e. will not create children
        router = "from-code"

        # number of children to create in case of a non-direct router; this setting
        # is ignored if routees.paths is given
        nr-of-instances = 1

        # FIXME document 'create-as', ticket 1511
        create-as {
          # fully qualified class name of recipe implementation
          class = ""
        }

        routees {
          # Alternatively to giving nr-of-instances you can specify the full
          # paths of those actors which should be routed to. This setting takes
          # precedence over nr-of-instances
          paths = []
        }
      }
    }

    default-dispatcher {
      # Must be one of the following
      # Dispatcher, (BalancingDispatcher, only valid when all actors using it are of
      # the same type),
      # A FQCN to a class inheriting MessageDispatcherConfigurator with a no-arg
      # visible constructor
      type = "Dispatcher"

      # Name used in log messages and thread names.
      name = "DefaultDispatcher"

      # Toggles whether the threads created by this dispatcher should be daemons or not
      daemonic = off

      # Keep alive time for threads
      keep-alive-time = 60s

      # minimum number of threads to cap factor-based core number to
      core-pool-size-min = 8

      # No of core threads ... ceil(available processors * factor)
      core-pool-size-factor = 8.0

      # maximum number of threads to cap factor-based number to
      core-pool-size-max = 4096

      # Hint: max-pool-size is only used for bounded task queues
      # minimum number of threads to cap factor-based max number to
      max-pool-size-min = 8

      # Max no of threads ... ceil(available processors * factor)
      max-pool-size-factor  = 8.0

      # maximum number of threads to cap factor-based max number to
      max-pool-size-max = 4096

      # Specifies the bounded capacity of the task queue (< 1 == unbounded)
      task-queue-size = -1

      # Specifies which type of task queue will be used, can be "array" or
      # "linked" (default)
      task-queue-type = "linked"

      # Allow core threads to time out
      allow-core-timeout = on

      # How long time the dispatcher will wait for new actors until it shuts down
      shutdown-timeout = 1s

      # Throughput defines the number of messages that are processed in a batch
      # before the thread is returned to the pool. Set to 1 for as fair as possible.
      throughput = 5

      # Throughput deadline for Dispatcher, set to 0 or negative for no deadline
      throughput-deadline-time = 0ms

      # If negative (or zero) then an unbounded mailbox is used (default)
      # If positive then a bounded mailbox is used and the capacity is set using the
      # property
      # NOTE: setting a mailbox to 'blocking' can be a bit dangerous, could lead to
      # deadlock, use with care
      # The following are only used for Dispatcher and only if mailbox-capacity > 0
      mailbox-capacity = -1

      # Specifies the timeout to add a new message to a mailbox that is full -
      # negative number means infinite timeout
      mailbox-push-timeout-time = 10s

      # FQCN of the MailboxType, if not specified the default bounded or unbounded
      # mailbox is used.
      mailboxType = ""
    }

    debug {
      # enable function of Actor.loggable(), which is to log any received message at
      # DEBUG level
      receive = off

      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill and the like)
      autoreceive = off

      # enable DEBUG logging of actor lifecycle changes
      lifecycle = off

      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = off

      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = off
    }

    # Entries for pluggable serializers and their bindings. If a binding for a specific
    # class is not found, then the default serializer (Java serialization) is used.
    serializers {
      # java = "akka.serialization.JavaSerializer"
      # proto = "akka.testing.ProtobufSerializer"
      # sjson = "akka.testing.SJSONSerializer"

      default = "akka.serialization.JavaSerializer"
    }

    # serialization-bindings {
    #   java = ["akka.serialization.SerializeSpec$Address",
    #           "akka.serialization.MyJavaSerializableActor",
    #           "akka.serialization.MyStatelessActorWithMessagesInMailbox",
    #           "akka.serialization.MyActorWithProtobufMessagesInMailbox"]
    #   sjson = ["akka.serialization.SerializeSpec$Person"]
    #   proto = ["com.google.protobuf.Message",
    #            "akka.actor.ProtobufProtocol$MyMessage"]
    # }
  }

  # Used to set the behavior of the scheduler.
  # Changing the default values may change the system behavior drastically so make sure
  # you know what you're doing!
  scheduler {
    # The HashedWheelTimer (HWT) implementation from Netty is used as the default scheduler
    # in the system.
    # HWT does not execute the scheduled tasks on exact time.
    # It will, on every tick, check if there are any tasks behind the schedule and execute them.
    # You can increase or decrease the accuracy of the execution timing by specifying smaller
    # or larger tick duration.
    # If you are scheduling a lot of tasks you should consider increasing the ticks per wheel.
    # For more information see: http://www.jboss.org/netty/
    tickDuration = 100ms
    ticksPerWheel = 512
  }
}

##############################
# Akka Reference Config File #
##############################

# This the reference config file has all the default settings.
# Make your edits/overrides in your akka.conf.

akka {
  version = "2.0-SNAPSHOT" # Akka version, checked against the runtime version of Akka.
  
  home = ""                # Home directory of Akka, modules in the deploy directory will be loaded

  enabled-modules = []     # Comma separated list of the enabled modules. Options: ["cluster", "camel", "http"]

  event-handlers = ["akka.event.Logging$DefaultLogger"] # Event handlers to register at boot time (Logging$DefaultLogger logs to STDOUT)
  loglevel        = "WARNING"                           # Options: ERROR, WARNING, INFO, DEBUG
                                                        # this level is used by the configured loggers (see "event-handlers") as soon
                                                        # as they have been started; before that, see "stdout-loglevel"
  stdout-loglevel = "WARNING"                           # Loglevel for the very basic logger activated during AkkaApplication startup

  extensions = []          # list FQCN of extensions which shall be loaded at actor system startup

  # These boot classes are loaded (and created) automatically when the Akka Microkernel boots up
  #     Can be used to bootstrap your application(s)
  #     Should be the FQN (Fully Qualified Name) of the boot class which needs to have a default constructor
  # boot = ["sample.camel.Boot",
  #         "sample.rest.java.Boot",
  #         "sample.rest.scala.Boot",
  #         "sample.security.Boot"]
  boot = []

  actor {
    provider = "akka.actor.LocalActorRefProvider"
    timeout = 5s                     # Default timeout for Future based invocations
                                     #    - Actor:        ask && ?
                                     #    - UntypedActor: ask
                                     #    - TypedActor:   methods with non-void return type
    serialize-messages = off         # Does a deep clone of (non-primitive) messages to ensure immutability
    dispatcher-shutdown-timeout = 1s # How long dispatchers by default will wait for new actors until they shut down

    deployment {
    
      default {                                                         # deployment id pattern, e.g. /app/service-ping

        router = "direct"                                               # routing (load-balance) scheme to use
                                                                        #     available: "direct", "round-robin", "random", "scatter-gather"
                                                                        #                "least-cpu", "least-ram", "least-messages"
                                                                        #     or:        fully qualified class name of the router class
                                                                        #     default is "direct";
                                                                        #     if 'replication' is used then the only available router is "direct"

        nr-of-instances = 1                                             # number of actor instances in the cluster
                                                                        #     available: positive integer (1-N) or the string "auto" for auto-scaling
                                                                        #     default is '1'
                                                                        #     if the "direct" router is used then this element is ignored (always '1')

        
        # optional
        create-as {                                                     # FIXME document 'create-as'
          class = ""                                                    # fully qualified class name of recipe implementation
        }
        
        remote {
          nodes = []                                                    # A list of hostnames and ports for instantiating the remote actor instances
                                                                        #     The format should be on "hostname:port", where:
                                                                        #         - hostname can be either hostname or IP address the remote actor should connect to
                                                                        #         - port should be the port for the remote server on the other node
        }
        
        cluster {                                                       # defines the actor as a clustered actor
                                                                        #     default (if omitted) is local non-clustered actor

          preferred-nodes = []                                          # a list of preferred nodes for instantiating the actor instances on
                                                                        #     on format "host:<hostname>", "ip:<ip address>" or "node:<node name>"

          
          # optional
          replication {                                                 # use replication or not? only makes sense for a stateful actor
            # FIXME should we have this config option here? If so, implement it all through.
            serialize-mailbox = off                                     # should the actor mailbox be part of the serialized snapshot?
                                                                        #     default is 'off'

            storage = "transaction-log"                                 # storage model for replication
                                                                        #     available: "transaction-log" and "data-grid"
                                                                        #     default is "transaction-log"

            strategy = "write-through"                                  # guarantees for replication
                                                                        #     available: "write-through" and "write-behind"
                                                                        #     default is "write-through"
            
          }
        }
      }
    }

    default-dispatcher {
      type = "Dispatcher"              # Must be one of the following
                                       # Dispatcher, (BalancingDispatcher, only valid when all actors using it are of the same type),
                                       # A FQCN to a class inheriting MessageDispatcherConfigurator with a no-arg visible constructor
      name = "DefaultDispatcher"       # Optional, will be a generated UUID if omitted
      keep-alive-time = 60s            # Keep alive time for threads
      core-pool-size-factor = 8.0      # No of core threads ... ceil(available processors * factor)
      max-pool-size-factor  = 8.0      # Max no of threads ... ceil(available processors * factor)
      task-queue-size = -1             # Specifies the bounded capacity of the task queue (< 1 == unbounded)
      task-queue-type = "linked"       # Specifies which type of task queue will be used, can be "array" or "linked" (default)
      allow-core-timeout = on          # Allow core threads to time out
      throughput = 5                   # Throughput for Dispatcher, set to 1 for complete fairness
      throughput-deadline-time =  0ms  # Throughput deadline for Dispatcher, set to 0 or negative for no deadline
      mailbox-capacity = -1            # If negative (or zero) then an unbounded mailbox is used (default)
                                       # If positive then a bounded mailbox is used and the capacity is set using the property
                                       # NOTE: setting a mailbox to 'blocking' can be a bit dangerous, could lead to deadlock, use with care
                                       # The following are only used for Dispatcher and only if mailbox-capacity > 0
      mailbox-push-timeout-time = 10s  # Specifies the timeout to add a new message to a mailbox that is full - negative number means infinite timeout
    }

    debug {
      receive = off        # enable function of Actor.loggable(), which is to log any received message at DEBUG level
      autoreceive = off    # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill and the like)
      lifecycle = off      # enable DEBUG logging of actor lifecycle changes
      fsm = off            # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      event-stream = off   # enable DEBUG logging of subscription changes on the eventStream
    }

  }

  # Used to set the behavior of the scheduler.
  # Changing the default values may change the system behavior drastically so make sure you know what you're doing!
  #
  scheduler {
    # The HashedWheelTimer (HWT) implementation from Netty is used as the default scheduler in the system.
    #
    # HWT does not execute the scheduled tasks on exact time.
    # It will, on every tick, check if there are any tasks behind the schedule and execute them.
    # You can increase or decrease the accuracy of the execution timing by specifying smaller or larger tick duration.
    # If you are scheduling a lot of tasks you should consider increasing the ticks per wheel.
    # For more information see: http://www.jboss.org/netty/
    tickDuration = 100ms
    ticksPerWheel = 512
  }


}

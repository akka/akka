/**
 * Copyright (C) 2009-2014 Typesafe Inc. <http://www.typesafe.com>
 */
package akka.actor

import org.scalatest.WordSpec
import org.scalatest.Matchers
import java.net.MalformedURLException

class ActorPathSpec extends WordSpec with Matchers {

  "An ActorPath" must {

    "support parsing its String rep" in {
      val path = RootActorPath(Address("akka.tcp", "mysys")) / "user"
      ActorPath.fromString(path.toString) should be(path)
    }

    "support parsing remote paths" in {
      val remote = "akka://my_sys@host:1234/some/ref"
      ActorPath.fromString(remote).toString should be(remote)
    }

    "throw exception upon malformed paths" in {
      intercept[MalformedURLException] { ActorPath.fromString("") }
      intercept[MalformedURLException] { ActorPath.fromString("://hallo") }
      intercept[MalformedURLException] { ActorPath.fromString("s://dd@:12") }
      intercept[MalformedURLException] { ActorPath.fromString("s://dd@h:hd") }
      intercept[MalformedURLException] { ActorPath.fromString("a://l:1/b") }
    }

    "create correct toString" in {
      val a = Address("akka.tcp", "mysys")
      RootActorPath(a).toString should be("akka.tcp://mysys/")
      (RootActorPath(a) / "user").toString should be("akka.tcp://mysys/user")
      (RootActorPath(a) / "user" / "foo").toString should be("akka.tcp://mysys/user/foo")
      (RootActorPath(a) / "user" / "foo" / "bar").toString should be("akka.tcp://mysys/user/foo/bar")
    }

    "have correct path elements" in {
      (RootActorPath(Address("akka.tcp", "mysys")) / "user" / "foo" / "bar").elements.toSeq should be(Seq("user", "foo", "bar"))
    }

    "create correct toStringWithoutAddress" in {
      val a = Address("akka.tcp", "mysys")
      RootActorPath(a).toStringWithoutAddress should be("/")
      (RootActorPath(a) / "user").toStringWithoutAddress should be("/user")
      (RootActorPath(a) / "user" / "foo").toStringWithoutAddress should be("/user/foo")
      (RootActorPath(a) / "user" / "foo" / "bar").toStringWithoutAddress should be("/user/foo/bar")
    }

    "create correct toStringWithAddress" in {
      val local = Address("akka.tcp", "mysys")
      val a = local.copy(host = Some("aaa"), port = Some(2552))
      val b = a.copy(host = Some("bb"))
      val c = a.copy(host = Some("cccc"))
      val root = RootActorPath(local)
      root.toStringWithAddress(a) should be("akka.tcp://mysys@aaa:2552/")
      (root / "user").toStringWithAddress(a) should be("akka.tcp://mysys@aaa:2552/user")
      (root / "user" / "foo").toStringWithAddress(a) should be("akka.tcp://mysys@aaa:2552/user/foo")

      //      root.toStringWithAddress(b) should be("akka.tcp://mysys@bb:2552/")
      (root / "user").toStringWithAddress(b) should be("akka.tcp://mysys@bb:2552/user")
      (root / "user" / "foo").toStringWithAddress(b) should be("akka.tcp://mysys@bb:2552/user/foo")

      root.toStringWithAddress(c) should be("akka.tcp://mysys@cccc:2552/")
      (root / "user").toStringWithAddress(c) should be("akka.tcp://mysys@cccc:2552/user")
      (root / "user" / "foo").toStringWithAddress(c) should be("akka.tcp://mysys@cccc:2552/user/foo")

      val rootA = RootActorPath(a)
      rootA.toStringWithAddress(b) should be("akka.tcp://mysys@aaa:2552/")
      (rootA / "user").toStringWithAddress(b) should be("akka.tcp://mysys@aaa:2552/user")
      (rootA / "user" / "foo").toStringWithAddress(b) should be("akka.tcp://mysys@aaa:2552/user/foo")
    }

    "support parsing crazy long actor name" in {
      "687474703a2f2f74686566727569742e636f6d2f26683d37617165716378357926656e633d617a6e696e73346f7462636b627671" +
        "7976397967646c7266347a6e386d2d367679346c62736979676a767175637a797165617138627163785f7a767070326b33657976622d" +
        "7434666975306e707971366c777a723666626c776c757a6f3270686578716c5f62697277766f6539706271726e72695f617662617862" +
        "7869666f7a647a30796f63702d7832636a70796b6971626d7a6a7a65726d7a386968757466623831746e747235656a616561646c6679" +
        "75716d31396e6c363068303473707673726566756b736e6e62796b6974646f6765707174636b36396e79377964303767737071617666" +
        "37686f7879653534676866796a747764666933737769623267746f736e73723973766871387461686e7478627333646e687362716f31" +
        "386b67793871636d6c61646e746d6f6b646272795f34686d7270647265766d6b646b6672646577686664666964737873766a616a7a6f" +
        "636a61696a30786a36386836736f6e725f7970706a67766c6a33356964673274736176353978677463787763707937757574327a6934" +
        "6e397535793777715f7566706c70726f5f6c7a76616c3733616264705f72626f2d75723668736a6e6f79747376766270636377785f74" +
        "6f62367465786e6164696d6637773332746267727973636b7369757074393764786d747572355f737266356b736a7773786c6e347939" +
        "306a6f7a72736c7870646c347a6b71303671376e6f357461396476696e6a637a336c74786765642d6965617331353366617678376b30" +
        "31696d666970633063673466636174636c326e627673726c763566706d77647779666470796f6c6a33766475766465767a696e74656b" +
        "322d353135797463686d727738662d7a777368736973716273656d5f6b786379716e736968316874655f6f786d716b7a6c6b72786534" +
        "6972637767716d647166626a366f6a79657375627473376b7577797a7038746d6c746e763271646f73315f636d6a65336c7039776264" +
        "64756a6f7a6f3239356d776d61646b6b6c736771747565696d79307668696c3570653364697877377a65767976735f706c6e67356271" +
        "657579356d6f3430676c326c6575676d6b626332686a68726c7733396d716e74355f72626d6530396f366938636e6b656d65786a7632" +
        "61666d7067656364617670727873306d7a706e6f62636a6269387a7a6934693337796f3133797a3177627471766e6b38626c3338707a" +
        "75776863372d61666d6b7565673338746868676d677534623073687a6738675f643269623178317a65366f646861673930667573787a" +
        "7963696f396a6b326f6d74676175683637747779786a63786a64746f6f687576763870646d64796c656f6f31696773385f6668666478" +
        "6170326a6e63706d632d6634652d706166675f6775726d647066766b766466706174756e6174696966617870637877736d5f6a6c6667" +
        "36707735686b6a7a726170666e6d7178776d6c3775796868796a6e706d697a31655f797a7565672d30716872345f6b5f67636a393562" +
        "696732797963677a64686a686563706f6a3970786c5f75645f61776e6d616f6a746b6171656d2d6371335f70766265347a776f716e70" +
        "666f616b7474747636737776746179756e2d31696d69746f7a747570646a6c7a386862627069776c6e6373736b6b786971656c796675" +
        "357570792d65316467386e776b667766627a696561736a786e617565785f6865783778656d726672363867647a6d62676d6363346e68" +
        "396c786667736d746a376766776e6e6434347365636d7577626735746e77736965337869733865397173617530776c7562696b636179" +
        "2d7274766e68697a7375757077766b72746464756c66702d3979756b73623375377270776f716964666568786634786d6f7569627072" +
        "706d79716f303568657a72636a6461346f63617a65697a756162656a6d36796b726765646b6f31376768646538387863617170777863" +
        "6779637269626d66616b6f7276346b7063366a34333573326e6a746834667a6b6368386a706d6a63756f377833757777727075317974" +
        "68666778396479666b6777786635353670723669776a6a6d6c67676f6d76777167643539737a70786d77687262646e327775726f6e7a" +
        "6c30393339656830627a6a6979673376736774636d6f7465396168657979675f7875776e776a71385f397872666239776e7a74796566" +
        "68696c7162746f6469677230387a3766706a66366d76716e7978377075616c72736570725f626a346964786e6f77667865326c336479" +
        "6d386264676f65366c64637a77706b697167326f72396373656e5f6877697164627170793939635f356564646a6d7a68737468736c6b" +
        "71636567736d6c6b34676565676e32673138646c366e74317874766f75797270333134775f6a6c7a78726f793667726666786d6b3876" +
        "6c613374736364676e6b323176746670646868775f39776d643171676c616666666b6836796c6b6871376a775f656132386978326d74" +
        "726c3579767771773065636c72657074643634377a78756e67727868306979756e686368786469653264707a69656d70766a76646d77" +
        "7566696462386e723239767a3162737038306332746e6f6d6a6f357174356e74357770613934626632397169387572766b6177397537" +
        "6577746a7665736661696f6d3534716e6c696633386e656d3376766b6e6c6171326574306264326e6e71643138696e5f6b6d716c6d73" +
        "766e38715f7937687363383467305f64636b6830706d716a78613636366a72666b7a7635666a636669727175356a70316b6a63306731" +
        "38366e61657866626b323275777770766e6965735f6b313173655f343867646961617069696e6b5f677a792d693670697a6779686735" +
        "7667786d756276616432326774696f6e3470646b6b736762647a61636d6531676f797775356d7675776f30757976386476756e627772" +
        "666d6b6967316a6d7a6d636c733862696f743631766a6a6f6d6b30706b736b2d6477713863686e757162626f706d376832343632367a" +
        "73786b6171637838397836786d2d716c5f716468696c67355f3774746738746d69366c6a635f7331356b716871786f79666a39707171" +
        "38726d756c676f6d356275676e376364692d6b62696f7a6a5f766663633236336765786f6f32326667697377793764786165746c3931" +
        "687867657866657263666c6632756573356e615f2d617733686c726c7637717372767578656c6f746c676e78323076687a376931716e" +
        "303270686778313077643537776d75787364343669677a6d6979706d62756c6e6633656c62756676706765787667786a6b7370785f79" +
        "6461767975735f6f6937663038757276677337783768756e3664307a3935656f726c36777a686e6f7563687867626f666672706a7a61" +
        "666c7667796d683762777270656f756a5f6b65686b6672716663636f6c317670366d61636e706574627864386c3475676f386c737a65" +
        "766137676d667562326e32786976756d656f69695f787a6379697165656765787734656c35353968612d6a6874656f656d735f786575" +
        "37706c2d62666879665f663335786272356d686b6e6e716c7466752d6a656b6766676f7a7163393077767869696f6b6a7678636e6764" +
        "6369377137376e386d76646b625f6d5f667235753831326e37757a6c7a5f346e6c6a6a6d302d746c67313376347669716478616a756c" +
        "6371703871732d7a73386e656e726a6473345f6b6a6e787a6f6a68626967316d7976776474676473706a7434773362706d7a726a7668" +
        "666f656c71766e346c6a6b3937736f766e63726d646c3061356a786578697765686c636a3938326e746570767a796e6a68687672715f" +
        "6a7366756a746c317a68336e75647a73766f7267386567336462637473627274796b786a74726a78366178383578616e36723178736f" +
        "757270706363373869386677797765626d31697763736e707275637431706c6466745f706b762d6e61397339775f32623739646b7267" +
        "63727264747a7a33327170787975737867772d6c373773766e773473796a6f7839716c706470753133307273663039707a6c6f6d396f" +
        "33712d6464626d3063307573366b353033636b69757361783263787a74636677777a69626f6b6d336877692d7870686a30636f612d38" +
        "686662796f656777636e617978707961616c7374696c306a337a786368736c656f6432796f797864666c717166396e716a6472797337" +
        "70657767796675676d6637777572646d6e64787065756533626f696d7231776663706d7a6f2d70696561716471637475776472676961" +
        "327668706c7a777977796d67677a6a646a626b373067612d6d7377666e70693134336938373377307a6876676a6132766c3974756e33" +
        "6b323066622d6c66776f347675707472347a376b6f39636d313065663933646866736d37766c69736f68717330726362623137347862" +
        "306277787331616b6d737268626c6c772d637a716d6c6970316a6835717970716e646b776a6c6273713875706931686d61656675716c" +
        "70327a7a70726461366630766b346d3969336c735f74796b6e6d726365785f636d766e656d656c677a6a762d74663375656c63727438" +
        "6b783335766a646a5f656e6a6373767867677667646869666a6b75665f676f62766c75316175376336726c783872776a39657379616b" +
        "636a6538676c687374776968697a3276656875746d34697136767869616f6c5f6d71342d67696f7867737767706a62337579612d3366" +
        "74677a772d2d7070797372783664797863786f61356d" match {
        case ActorPath.ElementRegex() ⇒ "awesome"
        case _                        ⇒
      }
    }
  }
}

######################################
# Akka Cluster Reference Config File #
######################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

akka {

  cluster {
    # Initial contact points of the cluster. Nodes to join at startup if auto-join = on.
    # Comma separated full URIs defined by a string on the form of "akka://system@hostname:port"
    # Leave as empty if the node should be a singleton cluster.
    seed-nodes = []

    # how long to wait for one of the seed nodes to reply to initial join request
    seed-node-timeout = 5s

    # Automatic join the seed-nodes at startup.
    # If seed-nodes is empty it will join itself and become a single node cluster.
    auto-join = on

    # Should the 'leader' in the cluster be allowed to automatically mark unreachable nodes as DOWN?
    # Using auto-down implies that two separate clusters will automatically be formed in case of
    # network partition.
    auto-down = off

    # how long should the node wait before starting the periodic tasks maintenance tasks?
    periodic-tasks-initial-delay = 1s

    # how often should the node send out gossip information?
    gossip-interval = 1s

    # how often should the node send out heartbeats?
    heartbeat-interval = 1s

    # how often should the leader perform maintenance tasks?
    leader-actions-interval = 1s

    # how often should the node move nodes, marked as unreachable by the failure detector, out of the membership ring?
    unreachable-nodes-reaper-interval = 1s

    # How often the current state (Gossip) should be published for reading from the outside.
    # A value of 0 s can be used to always publish the state, when it happens.
    publish-state-interval = 1s

    # A joining node stops sending heartbeats to the node to join if it hasn't become member
    # of the cluster within this deadline.
    join-timeout = 60s

    # The id of the dispatcher to use for cluster actors. If not specified default dispatcher is used.
    # If specified you need to define the settings of the actual dispatcher.
    use-dispatcher = ""

    # Gossip to random node with newer or older state information, if any with some
    # this probability. Otherwise Gossip to any random live node.
    # Probability value is between 0.0 and 1.0. 0.0 means never, 1.0 means always.
    gossip-different-view-probability = 0.8

    # Limit number of merge conflicts per second that are handled. If the limit is
    # exceeded the conflicting gossip messages are dropped and will reappear later.
    max-gossip-merge-rate = 5.0

    failure-detector {

      # defines the failure detector threshold
      #     A low threshold is prone to generate many wrong suspicions but ensures
      #     a quick detection in the event of a real crash. Conversely, a high
      #     threshold generates fewer mistakes but needs more time to detect
      #     actual crashes
      threshold = 8.0

      # Minimum standard deviation to use for the normal distribution in
      # AccrualFailureDetector. Too low standard deviation might result in
      # too much sensitivity for sudden, but normal, deviations in heartbeat
      # inter arrival times.
      min-std-deviation = 100 ms

      # Number of potentially lost/delayed heartbeats that will be
      # accepted before considering it to be an anomaly.
      # It is a factor of heartbeat-interval.
      # This margin is important to be able to survive sudden, occasional,
      # pauses in heartbeat arrivals, due to for example garbage collect or
      # network drop.
      acceptable-heartbeat-pause = 3s

      implementation-class = "akka.cluster.AccrualFailureDetector"

      max-sample-size = 1000
    }

    # If the tick-duration of the default scheduler is longer than the tick-duration
    # configured here a dedicated scheduler will be used for periodic tasks of the cluster,
    # otherwise the default scheduler is used.
    # See akka.scheduler settings for more details about the HashedWheelTimer.
    scheduler {
      tick-duration = 33ms
      ticks-per-wheel = 512
    }

    # Netty blocks when sending to broken connections, and this circuit breaker
    # is used to reduce connect attempts to broken connections.
    send-circuit-breaker {
      max-failures = 3
      call-timeout = 2 s
      reset-timeout = 30 s
    }
  }
}

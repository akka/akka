#######################################################
# Akka Persistence Query Reference Configuration File #
#######################################################

# This is the reference config file that contains all the default settings.
# Make your edits in your application.conf in order to override these settings.

#//#query-leveldb
# Configuration for the LeveldbReadJournal
akka.persistence.query.journal.leveldb {
  # Implementation class of the LevelDB ReadJournalProvider
  class = "akka.persistence.query.journal.leveldb.LeveldbReadJournalProvider"
  
  # Absolute path to the write journal plugin configuration entry that this 
  # query journal will connect to. That must be a LeveldbJournal or SharedLeveldbJournal.
  # If undefined (or "") it will connect to the default journal as specified by the
  # akka.persistence.journal.plugin property.
  write-plugin = ""
  
  # The LevelDB write journal is notifying the query side as soon as things
  # are persisted, but for efficiency reasons the query side retrieves the events 
  # in batches that sometimes can be delayed up to the configured `refresh-interval`.
  refresh-interval = 3s
  
  # How many events to fetch in one query (replay) and keep buffered until they
  # are delivered downstreams.
  max-buffer-size = 100
}
#//#query-leveldb

akka.persistence.query.events-by-slice-firehose {
  class = "akka.persistence.query.typed.EventsBySliceFirehoseReadJournalProvider"

  # The identifier (config path) of the underlying EventsBySlice query plugin.
  # This must be defined by the application.
  delegate-query-plugin-id = ""

  # Buffer size of the BroadcastHub that will fan out the shared firehose stream
  # to attached consumer streams. If too small, some consumers may slow down other
  # consumers before the slow consumers have been aborted. If too large, it will
  # use more memory by holding more events in the buffer memory.
  # Must be a power of two and less than 4096.
  broadcast-buffer-size = 256

  # The shared firehose stream will be closed after this timeout when all consumer
  # streams have been closed. It will be started again when new consumers attach,
  # but there is some overhead of stopping and starting so it's good to keep it
  # around for a while. For example, keep around long enough to cover Projection
  # restarts.
  firehose-linger-timeout = 40s

  # When the catchup stream for a new consumer has caught up to the shared firehose
  # stream events will be retrieved from both during this time of overlap. The reason
  # is to ensure that no events are missed when switching over. After that,
  # the catchup stream will be closed. Time is based on the timestamps of the
  # EventEnvelope.
  catchup-overlap = 10s

  # Approximately number of entries of the deduplication cache.
  # During the overlap period events will be deduplicated by keeping track of emitted
  # persistenceId and seqNr.
  deduplication-capacity = 10000

  # Slow consumers are detected and aborted by a background task that is running
  # with this interval. Should be less than `slow-consumer-lag-threshold`.
  slow-consumer-reaper-interval = 2s

  # Slow consumer candidates are determined if the fastest consumer has a lag greater
  # than this duration, and the slow consumer is behind the fastest consumer by more
  # than half of the `broadcast-buffer-size`.
  # Slow consumers are then confirmed to be slow if they stay as such for at
  # least `abort-slow-consumer-after`.
  slow-consumer-lag-threshold = 5s

  # See `slow-consumer-lag-threshold`.
  # This duration is based on wall clock time.
  abort-slow-consumer-after = 2s

  # Provide a higher level of details in the debug logs, often per event. Be careful about enabling
  # in production systems.
  verbose-debug-logging = off
}

akka.actor {
  serializers {
    akka-persistence-query = "akka.persistence.query.internal.QuerySerializer"
  }
  serialization-bindings {
    "akka.persistence.query.typed.EventEnvelope" = akka-persistence-query
    "akka.persistence.query.Offset" = akka-persistence-query
  }
  serialization-identifiers {
    "akka.persistence.query.internal.QuerySerializer" = 39
  }
}
